/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /home/ivan/projects/zephyrOS/esp32_ble_csc/build/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /soc
 *   4   /soc/interrupt-controller@3ff00104
 *   5   /soc/rtc@3ff48000
 *   6   /eth
 *   7   /mdio
 *   8   /wifi
 *   9   /soc/gpio
 *   10  /soc/gpio/gpio@3ff44000
 *   11  /buttons
 *   12  /buttons/button_0
 *   13  /buttons/sw_0
 *   14  /cpus
 *   15  /cpus/power-states
 *   16  /cpus/power-states/deep_sleep
 *   17  /cpus/power-states/light_sleep
 *   18  /cpus/cpu@0
 *   19  /cpus/cpu@1
 *   20  /leds
 *   21  /leds/led_0
 *   22  /pin-controller
 *   23  /pin-controller/i2c0_default
 *   24  /pin-controller/i2c0_default/group1
 *   25  /pin-controller/spim2_default
 *   26  /pin-controller/spim2_default/group1
 *   27  /pin-controller/spim2_default/group2
 *   28  /pin-controller/spim3_default
 *   29  /pin-controller/spim3_default/group1
 *   30  /pin-controller/spim3_default/group2
 *   31  /pin-controller/uart0_default
 *   32  /pin-controller/uart0_default/group1
 *   33  /pin-controller/uart0_default/group2
 *   34  /pin-controller/uart1_default
 *   35  /pin-controller/uart1_default/group1
 *   36  /pin-controller/uart1_default/group2
 *   37  /pin-controller/uart2_default
 *   38  /pin-controller/uart2_default/group1
 *   39  /pin-controller/uart2_default/group2
 *   40  /soc/adc@3ff48800
 *   41  /soc/adc@3ff48890
 *   42  /soc/can@3ff6b000
 *   43  /soc/counter@3ff5f000
 *   44  /soc/counter@3ff5f024
 *   45  /soc/counter@3ff60000
 *   46  /soc/counter@3ff60024
 *   47  /soc/dac@3ff48800
 *   48  /soc/i2c@3ff53000
 *   49  /soc/i2c@3ff67000
 *   50  /soc/ipi@3f4c0058
 *   51  /soc/ipi@3f4c005c
 *   52  /soc/memory@3ffe5230
 *   53  /soc/ipm@3ffed238
 *   54  /soc/ledc@3ff59000
 *   55  /soc/mcpwm@3ff5e000
 *   56  /soc/mcpwm@3ff6c000
 *   57  /soc/memory@3ffb0000
 *   58  /soc/memory@3ffe5630
 *   59  /soc/pcnt@3ff57000
 *   60  /soc/psram@3f800000
 *   61  /soc/spi@3ff64000
 *   62  /soc/spi@3ff65000
 *   63  /soc/touch@3ff48858
 *   64  /soc/trng@3ff75144
 *   65  /soc/uart@3ff40000
 *   66  /soc/uart@3ff50000
 *   67  /soc/uart@3ff6e000
 *   68  /soc/watchdog@3ff5f048
 *   69  /soc/watchdog@3ff60048
 *   70  /soc/flash-controller@3ff42000
 *   71  /soc/flash-controller@3ff42000/flash@0
 *   72  /soc/flash-controller@3ff42000/flash@0/partitions
 *   73  /soc/flash-controller@3ff42000/flash@0/partitions/partition@1000
 *   74  /soc/flash-controller@3ff42000/flash@0/partitions/partition@10000
 *   75  /soc/flash-controller@3ff42000/flash@0/partitions/partition@110000
 *   76  /soc/flash-controller@3ff42000/flash@0/partitions/partition@210000
 *   77  /soc/flash-controller@3ff42000/flash@0/partitions/partition@250000
 *   78  /soc/gpio/gpio@3ff44800
 *   79  /soc/rtc@3ff48000/rtc_timer
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/* Used to remove brackets from around a single argument */
#define DT_DEBRACKET_INTERNAL(...) __VA_ARGS__

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"

/* Helper macros for child nodes of this node. */
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_wifi) fn(DT_N_S_eth) fn(DT_N_S_mdio) fn(DT_N_S_pin_controller) fn(DT_N_S_buttons) fn(DT_N_S_leds)
#define DT_N_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_wifi) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eth) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_mdio) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_wifi, __VA_ARGS__) fn(DT_N_S_eth, __VA_ARGS__) fn(DT_N_S_mdio, __VA_ARGS__) fn(DT_N_S_pin_controller, __VA_ARGS__) fn(DT_N_S_buttons, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_wifi, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eth, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_mdio, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_pin_controller) fn(DT_N_S_buttons) fn(DT_N_S_leds)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_pin_controller, __VA_ARGS__) fn(DT_N_S_buttons, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_ORD 0
#define DT_N_ORD_STR_SORTABLE 00000

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /soc */ \
	6, /* /eth */ \
	7, /* /mdio */ \
	8, /* /wifi */ \
	11, /* /buttons */ \
	14, /* /cpus */ \
	20, /* /leds */ \
	22, /* /pin-controller */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_espressif_esp32 DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_espressif_esp32 1
#define DT_N_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_COMPAT_MODEL_IDX_0 "esp32"
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"espressif,esp32"}
#define DT_N_P_compatible_IDX_0 "espressif,esp32"
#define DT_N_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32
#define DT_N_P_compatible_IDX_0_STRING_TOKEN espressif_esp32
#define DT_N_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_aliases_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1
#define DT_N_S_aliases_ORD_STR_SORTABLE 00001

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2
#define DT_N_S_chosen_ORD_STR_SORTABLE 00002

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_memory_3ffb0000) fn(DT_N_S_soc_S_memory_3ffe5230) fn(DT_N_S_soc_S_memory_3ffe5630) fn(DT_N_S_soc_S_interrupt_controller_3ff00104) fn(DT_N_S_soc_S_rtc_3ff48000) fn(DT_N_S_soc_S_flash_controller_3ff42000) fn(DT_N_S_soc_S_psram_3f800000) fn(DT_N_S_soc_S_ipm_3ffed238) fn(DT_N_S_soc_S_ipi_3f4c0058) fn(DT_N_S_soc_S_ipi_3f4c005c) fn(DT_N_S_soc_S_uart_3ff40000) fn(DT_N_S_soc_S_uart_3ff50000) fn(DT_N_S_soc_S_uart_3ff6e000) fn(DT_N_S_soc_S_pcnt_3ff57000) fn(DT_N_S_soc_S_ledc_3ff59000) fn(DT_N_S_soc_S_mcpwm_3ff5e000) fn(DT_N_S_soc_S_mcpwm_3ff6c000) fn(DT_N_S_soc_S_gpio) fn(DT_N_S_soc_S_touch_3ff48858) fn(DT_N_S_soc_S_i2c_3ff53000) fn(DT_N_S_soc_S_i2c_3ff67000) fn(DT_N_S_soc_S_trng_3ff75144) fn(DT_N_S_soc_S_watchdog_3ff5f048) fn(DT_N_S_soc_S_watchdog_3ff60048) fn(DT_N_S_soc_S_spi_3ff64000) fn(DT_N_S_soc_S_spi_3ff65000) fn(DT_N_S_soc_S_can_3ff6b000) fn(DT_N_S_soc_S_counter_3ff5f000) fn(DT_N_S_soc_S_counter_3ff5f024) fn(DT_N_S_soc_S_counter_3ff60000) fn(DT_N_S_soc_S_counter_3ff60024) fn(DT_N_S_soc_S_dac_3ff48800) fn(DT_N_S_soc_S_adc_3ff48800) fn(DT_N_S_soc_S_adc_3ff48890)
#define DT_N_S_soc_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_memory_3ffb0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_3ffe5230) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_3ffe5630) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_3ff00104) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_3ff48000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_psram_3f800000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ipm_3ffed238) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ipi_3f4c0058) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ipi_3f4c005c) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_3ff40000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_3ff50000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_3ff6e000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pcnt_3ff57000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ledc_3ff59000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_mcpwm_3ff5e000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_mcpwm_3ff6c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_touch_3ff48858) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_3ff53000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_3ff67000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_trng_3ff75144) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_3ff5f048) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_3ff60048) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_3ff64000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_3ff65000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_can_3ff6b000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_3ff5f000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_3ff5f024) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_3ff60000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_3ff60024) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_dac_3ff48800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_3ff48800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_3ff48890)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3ffb0000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3ffe5230, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3ffe5630, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_3ff48000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000, __VA_ARGS__) fn(DT_N_S_soc_S_psram_3f800000, __VA_ARGS__) fn(DT_N_S_soc_S_ipm_3ffed238, __VA_ARGS__) fn(DT_N_S_soc_S_ipi_3f4c0058, __VA_ARGS__) fn(DT_N_S_soc_S_ipi_3f4c005c, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3ff40000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3ff50000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3ff6e000, __VA_ARGS__) fn(DT_N_S_soc_S_pcnt_3ff57000, __VA_ARGS__) fn(DT_N_S_soc_S_ledc_3ff59000, __VA_ARGS__) fn(DT_N_S_soc_S_mcpwm_3ff5e000, __VA_ARGS__) fn(DT_N_S_soc_S_mcpwm_3ff6c000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio, __VA_ARGS__) fn(DT_N_S_soc_S_touch_3ff48858, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_3ff53000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_3ff67000, __VA_ARGS__) fn(DT_N_S_soc_S_trng_3ff75144, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_3ff5f048, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_3ff60048, __VA_ARGS__) fn(DT_N_S_soc_S_spi_3ff64000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_3ff65000, __VA_ARGS__) fn(DT_N_S_soc_S_can_3ff6b000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff5f000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff5f024, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff60000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff60024, __VA_ARGS__) fn(DT_N_S_soc_S_dac_3ff48800, __VA_ARGS__) fn(DT_N_S_soc_S_adc_3ff48800, __VA_ARGS__) fn(DT_N_S_soc_S_adc_3ff48890, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_3ffb0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_3ffe5230, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_3ffe5630, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_3ff00104, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_3ff48000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_psram_3f800000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ipm_3ffed238, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ipi_3f4c0058, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ipi_3f4c005c, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_3ff40000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_3ff50000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_3ff6e000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pcnt_3ff57000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ledc_3ff59000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_mcpwm_3ff5e000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_mcpwm_3ff6c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_touch_3ff48858, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_3ff53000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_3ff67000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_trng_3ff75144, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_3ff5f048, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_3ff60048, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_3ff64000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_3ff65000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_can_3ff6b000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_3ff5f000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_3ff5f024, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_3ff60000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_3ff60024, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_dac_3ff48800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_3ff48800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_3ff48890, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_memory_3ffb0000) fn(DT_N_S_soc_S_memory_3ffe5230) fn(DT_N_S_soc_S_memory_3ffe5630) fn(DT_N_S_soc_S_interrupt_controller_3ff00104) fn(DT_N_S_soc_S_rtc_3ff48000) fn(DT_N_S_soc_S_flash_controller_3ff42000) fn(DT_N_S_soc_S_ipi_3f4c0058) fn(DT_N_S_soc_S_ipi_3f4c005c) fn(DT_N_S_soc_S_uart_3ff40000) fn(DT_N_S_soc_S_gpio) fn(DT_N_S_soc_S_i2c_3ff53000) fn(DT_N_S_soc_S_trng_3ff75144) fn(DT_N_S_soc_S_watchdog_3ff5f048) fn(DT_N_S_soc_S_spi_3ff64000) fn(DT_N_S_soc_S_spi_3ff65000)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_memory_3ffb0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_3ffe5230) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_3ffe5630) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_3ff00104) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_3ff48000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ipi_3f4c0058) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ipi_3f4c005c) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_3ff40000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_3ff53000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_trng_3ff75144) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_3ff5f048) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_3ff64000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_3ff65000)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3ffb0000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3ffe5230, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3ffe5630, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_3ff48000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000, __VA_ARGS__) fn(DT_N_S_soc_S_ipi_3f4c0058, __VA_ARGS__) fn(DT_N_S_soc_S_ipi_3f4c005c, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3ff40000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_3ff53000, __VA_ARGS__) fn(DT_N_S_soc_S_trng_3ff75144, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_3ff5f048, __VA_ARGS__) fn(DT_N_S_soc_S_spi_3ff64000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_3ff65000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_3ffb0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_3ffe5230, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_3ffe5630, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_3ff00104, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_3ff48000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ipi_3f4c0058, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ipi_3f4c005c, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_3ff40000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_3ff53000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_trng_3ff75144, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_3ff5f048, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_3ff64000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_3ff65000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 3
#define DT_N_S_soc_ORD_STR_SORTABLE 00003

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */ \
	9, /* /soc/gpio */ \
	40, /* /soc/adc@3ff48800 */ \
	41, /* /soc/adc@3ff48890 */ \
	42, /* /soc/can@3ff6b000 */ \
	43, /* /soc/counter@3ff5f000 */ \
	44, /* /soc/counter@3ff5f024 */ \
	45, /* /soc/counter@3ff60000 */ \
	46, /* /soc/counter@3ff60024 */ \
	47, /* /soc/dac@3ff48800 */ \
	48, /* /soc/i2c@3ff53000 */ \
	49, /* /soc/i2c@3ff67000 */ \
	50, /* /soc/ipi@3f4c0058 */ \
	51, /* /soc/ipi@3f4c005c */ \
	52, /* /soc/memory@3ffe5230 */ \
	53, /* /soc/ipm@3ffed238 */ \
	54, /* /soc/ledc@3ff59000 */ \
	55, /* /soc/mcpwm@3ff5e000 */ \
	56, /* /soc/mcpwm@3ff6c000 */ \
	57, /* /soc/memory@3ffb0000 */ \
	58, /* /soc/memory@3ffe5630 */ \
	59, /* /soc/pcnt@3ff57000 */ \
	60, /* /soc/psram@3f800000 */ \
	61, /* /soc/spi@3ff64000 */ \
	62, /* /soc/spi@3ff65000 */ \
	63, /* /soc/touch@3ff48858 */ \
	64, /* /soc/trng@3ff75144 */ \
	65, /* /soc/uart@3ff40000 */ \
	66, /* /soc/uart@3ff50000 */ \
	67, /* /soc/uart@3ff6e000 */ \
	68, /* /soc/watchdog@3ff5f048 */ \
	69, /* /soc/watchdog@3ff60048 */ \
	70, /* /soc/flash-controller@3ff42000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UNQUOTED simple-bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_TOKEN simple_bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UPPER_TOKEN SIMPLE_BUS
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1
#define DT_N_S_soc_P_ranges_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@3ff00104
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_3ff00104
 *
 * Binding (compatible = espressif,esp32-intc):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/espressif,esp32-intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_PATH "/soc/interrupt-controller@3ff00104"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FULL_NAME "interrupt-controller@3ff00104"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_ORD 4
#define DT_N_S_soc_S_interrupt_controller_3ff00104_ORD_STR_SORTABLE 00004

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_SUPPORTS_ORDS \
	6, /* /eth */ \
	10, /* /soc/gpio/gpio@3ff44000 */ \
	42, /* /soc/can@3ff6b000 */ \
	43, /* /soc/counter@3ff5f000 */ \
	44, /* /soc/counter@3ff5f024 */ \
	45, /* /soc/counter@3ff60000 */ \
	46, /* /soc/counter@3ff60024 */ \
	47, /* /soc/dac@3ff48800 */ \
	48, /* /soc/i2c@3ff53000 */ \
	49, /* /soc/i2c@3ff67000 */ \
	50, /* /soc/ipi@3f4c0058 */ \
	51, /* /soc/ipi@3f4c005c */ \
	53, /* /soc/ipm@3ffed238 */ \
	55, /* /soc/mcpwm@3ff5e000 */ \
	56, /* /soc/mcpwm@3ff6c000 */ \
	59, /* /soc/pcnt@3ff57000 */ \
	61, /* /soc/spi@3ff64000 */ \
	62, /* /soc/spi@3ff65000 */ \
	63, /* /soc/touch@3ff48858 */ \
	65, /* /soc/uart@3ff40000 */ \
	66, /* /soc/uart@3ff50000 */ \
	67, /* /soc/uart@3ff6e000 */ \
	68, /* /soc/watchdog@3ff5f048 */ \
	69, /* /soc/watchdog@3ff60048 */ \
	78, /* /soc/gpio/gpio@3ff44800 */ \
	79, /* /soc/rtc@3ff48000/rtc_timer */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_EXISTS 1
#define DT_N_INST_0_espressif_esp32_intc DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_NODELABEL_intc              DT_N_S_soc_S_interrupt_controller_3ff00104

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_REG_NUM 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_REG_IDX_0_VAL_ADDRESS 1072693508 /* 0x3ff00104 */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_REG_IDX_0_VAL_SIZE 276 /* 0x114 */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_RANGES_NUM 0
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_interrupt_controller_3ff00104_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_3ff00104_COMPAT_MATCHES_espressif_esp32_intc 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_interrupt_controller_3ff00104_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_COMPAT_MODEL_IDX_0 "esp32-intc"
#define DT_N_S_soc_S_interrupt_controller_3ff00104_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_reg {1072693508 /* 0x3ff00104 */, 276 /* 0x114 */}
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_reg_IDX_0 1072693508
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_reg_IDX_1 276
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status "okay"
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, status, 0)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, status, 0)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_LEN 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible {"espressif,esp32-intc"}
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_IDX_0 "espressif,esp32-intc"
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-intc
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_intc
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_INTC
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/rtc@3ff48000
 *
 * Node identifier: DT_N_S_soc_S_rtc_3ff48000
 *
 * Binding (compatible = espressif,esp32-rtc):
 *   $ZEPHYR_BASE/dts/bindings/clock/espressif,esp32-rtc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_rtc_3ff48000_PATH "/soc/rtc@3ff48000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_rtc_3ff48000_FULL_NAME "rtc@3ff48000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_rtc_3ff48000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_rtc_3ff48000_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer)
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer)
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer)
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer)
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_rtc_3ff48000_ORD 5
#define DT_N_S_soc_S_rtc_3ff48000_ORD_STR_SORTABLE 00005

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_rtc_3ff48000_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_rtc_3ff48000_SUPPORTS_ORDS \
	6, /* /eth */ \
	7, /* /mdio */ \
	42, /* /soc/can@3ff6b000 */ \
	47, /* /soc/dac@3ff48800 */ \
	48, /* /soc/i2c@3ff53000 */ \
	49, /* /soc/i2c@3ff67000 */ \
	54, /* /soc/ledc@3ff59000 */ \
	55, /* /soc/mcpwm@3ff5e000 */ \
	56, /* /soc/mcpwm@3ff6c000 */ \
	59, /* /soc/pcnt@3ff57000 */ \
	61, /* /soc/spi@3ff64000 */ \
	62, /* /soc/spi@3ff65000 */ \
	65, /* /soc/uart@3ff40000 */ \
	66, /* /soc/uart@3ff50000 */ \
	67, /* /soc/uart@3ff6e000 */ \
	68, /* /soc/watchdog@3ff5f048 */ \
	69, /* /soc/watchdog@3ff60048 */ \
	79, /* /soc/rtc@3ff48000/rtc_timer */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_rtc_3ff48000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_rtc DT_N_S_soc_S_rtc_3ff48000
#define DT_N_NODELABEL_rtc              DT_N_S_soc_S_rtc_3ff48000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_rtc_3ff48000_REG_NUM 1
#define DT_N_S_soc_S_rtc_3ff48000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_REG_IDX_0_VAL_ADDRESS 1072988160 /* 0x3ff48000 */
#define DT_N_S_soc_S_rtc_3ff48000_REG_IDX_0_VAL_SIZE 216 /* 0xd8 */
#define DT_N_S_soc_S_rtc_3ff48000_RANGES_NUM 0
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_rtc_3ff48000_IRQ_NUM 0
#define DT_N_S_soc_S_rtc_3ff48000_COMPAT_MATCHES_espressif_esp32_rtc 1
#define DT_N_S_soc_S_rtc_3ff48000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_rtc_3ff48000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_COMPAT_MODEL_IDX_0 "esp32-rtc"
#define DT_N_S_soc_S_rtc_3ff48000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_rtc_3ff48000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_rtc_3ff48000_P_reg {1072988160 /* 0x3ff48000 */, 216 /* 0xd8 */}
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_IDX_0 1072988160
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_IDX_1 216
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_xtal_freq 2
#define DT_N_S_soc_S_rtc_3ff48000_P_xtal_freq_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_status "okay"
#define DT_N_S_soc_S_rtc_3ff48000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_rtc_3ff48000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_rtc_3ff48000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_rtc_3ff48000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_rtc_3ff48000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_rtc_3ff48000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_rtc_3ff48000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_rtc_3ff48000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_3ff48000, status, 0)
#define DT_N_S_soc_S_rtc_3ff48000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_3ff48000, status, 0)
#define DT_N_S_soc_S_rtc_3ff48000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_3ff48000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_3ff48000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_P_status_LEN 1
#define DT_N_S_soc_S_rtc_3ff48000_P_status_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible {"espressif,esp32-rtc"}
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_IDX_0 "espressif,esp32-rtc"
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-rtc
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_rtc
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_RTC
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_3ff48000, compatible, 0)
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_3ff48000, compatible, 0)
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_3ff48000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_3ff48000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_LEN 1
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_wakeup_source 0
#define DT_N_S_soc_S_rtc_3ff48000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_rtc_3ff48000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /eth
 *
 * Node identifier: DT_N_S_eth
 *
 * Binding (compatible = espressif,esp32-eth):
 *   $ZEPHYR_BASE/dts/bindings/ethernet/espressif,esp32-eth.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_eth_PATH "/eth"

/* Node's name with unit-address: */
#define DT_N_S_eth_FULL_NAME "eth"

/* Node parent (/) identifier: */
#define DT_N_S_eth_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_eth_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_eth_FOREACH_CHILD(fn) 
#define DT_N_S_eth_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_eth_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_eth_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_eth_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_eth_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_eth_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_eth_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_eth_ORD 6
#define DT_N_S_eth_ORD_STR_SORTABLE 00006

/* Ordinals for what this node depends on directly: */
#define DT_N_S_eth_REQUIRES_ORDS \
	0, /* / */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_eth_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_eth_EXISTS 1
#define DT_N_INST_0_espressif_esp32_eth DT_N_S_eth
#define DT_N_NODELABEL_eth              DT_N_S_eth

/* Macros for properties that are special in the specification: */
#define DT_N_S_eth_REG_NUM 0
#define DT_N_S_eth_RANGES_NUM 0
#define DT_N_S_eth_FOREACH_RANGE(fn) 
#define DT_N_S_eth_IRQ_NUM 1
#define DT_N_S_eth_IRQ_IDX_0_EXISTS 1
#define DT_N_S_eth_IRQ_IDX_0_VAL_irq 38
#define DT_N_S_eth_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_eth_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_eth_COMPAT_MATCHES_espressif_esp32_eth 1
#define DT_N_S_eth_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_eth_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_eth_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_eth_COMPAT_MODEL_IDX_0 "esp32-eth"
#define DT_N_S_eth_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_eth_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_eth_P_zephyr_random_mac_address 0
#define DT_N_S_eth_P_zephyr_random_mac_address_EXISTS 1
#define DT_N_S_eth_P_status "disabled"
#define DT_N_S_eth_P_status_STRING_UNQUOTED disabled
#define DT_N_S_eth_P_status_STRING_TOKEN disabled
#define DT_N_S_eth_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_eth_P_status_IDX_0 "disabled"
#define DT_N_S_eth_P_status_IDX_0_EXISTS 1
#define DT_N_S_eth_P_status_ENUM_IDX 2
#define DT_N_S_eth_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_eth_P_status_ENUM_TOKEN disabled
#define DT_N_S_eth_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_eth_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_eth, status, 0)
#define DT_N_S_eth_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_eth, status, 0)
#define DT_N_S_eth_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_eth, status, 0, __VA_ARGS__)
#define DT_N_S_eth_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_eth, status, 0, __VA_ARGS__)
#define DT_N_S_eth_P_status_LEN 1
#define DT_N_S_eth_P_status_EXISTS 1
#define DT_N_S_eth_P_compatible {"espressif,esp32-eth"}
#define DT_N_S_eth_P_compatible_IDX_0 "espressif,esp32-eth"
#define DT_N_S_eth_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-eth
#define DT_N_S_eth_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_eth
#define DT_N_S_eth_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_ETH
#define DT_N_S_eth_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_eth_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_eth, compatible, 0)
#define DT_N_S_eth_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_eth, compatible, 0)
#define DT_N_S_eth_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_eth, compatible, 0, __VA_ARGS__)
#define DT_N_S_eth_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_eth, compatible, 0, __VA_ARGS__)
#define DT_N_S_eth_P_compatible_LEN 1
#define DT_N_S_eth_P_compatible_EXISTS 1
#define DT_N_S_eth_P_interrupts {38 /* 0x26 */}
#define DT_N_S_eth_P_interrupts_IDX_0 38
#define DT_N_S_eth_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_eth_P_interrupts_EXISTS 1
#define DT_N_S_eth_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_eth_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_eth_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_eth_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_eth_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_eth, interrupt_parent, 0)
#define DT_N_S_eth_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_eth, interrupt_parent, 0)
#define DT_N_S_eth_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_eth, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_eth_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_eth, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_eth_P_interrupt_parent_LEN 1
#define DT_N_S_eth_P_interrupt_parent_EXISTS 1
#define DT_N_S_eth_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_eth_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_eth_P_clocks_IDX_0_VAL_offset 23
#define DT_N_S_eth_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_eth_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_eth, clocks, 0)
#define DT_N_S_eth_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_eth, clocks, 0)
#define DT_N_S_eth_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_eth, clocks, 0, __VA_ARGS__)
#define DT_N_S_eth_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_eth, clocks, 0, __VA_ARGS__)
#define DT_N_S_eth_P_clocks_LEN 1
#define DT_N_S_eth_P_clocks_EXISTS 1
#define DT_N_S_eth_P_wakeup_source 0
#define DT_N_S_eth_P_wakeup_source_EXISTS 1
#define DT_N_S_eth_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_eth_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /mdio
 *
 * Node identifier: DT_N_S_mdio
 *
 * Binding (compatible = espressif,esp32-mdio):
 *   $ZEPHYR_BASE/dts/bindings/mdio/espressif,esp32-mdio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_mdio_PATH "/mdio"

/* Node's name with unit-address: */
#define DT_N_S_mdio_FULL_NAME "mdio"

/* Node parent (/) identifier: */
#define DT_N_S_mdio_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_mdio_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_mdio_FOREACH_CHILD(fn) 
#define DT_N_S_mdio_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_mdio_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_mdio_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_mdio_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_mdio_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_mdio_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_mdio_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_mdio_ORD 7
#define DT_N_S_mdio_ORD_STR_SORTABLE 00007

/* Ordinals for what this node depends on directly: */
#define DT_N_S_mdio_REQUIRES_ORDS \
	0, /* / */ \
	5, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_mdio_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_mdio_EXISTS 1
#define DT_N_INST_0_espressif_esp32_mdio DT_N_S_mdio
#define DT_N_NODELABEL_mdio              DT_N_S_mdio

/* Macros for properties that are special in the specification: */
#define DT_N_S_mdio_REG_NUM 0
#define DT_N_S_mdio_RANGES_NUM 0
#define DT_N_S_mdio_FOREACH_RANGE(fn) 
#define DT_N_S_mdio_IRQ_NUM 0
#define DT_N_S_mdio_COMPAT_MATCHES_espressif_esp32_mdio 1
#define DT_N_S_mdio_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_mdio_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_mdio_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_mdio_COMPAT_MODEL_IDX_0 "esp32-mdio"
#define DT_N_S_mdio_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_mdio_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_mdio_P_suppress_preamble 0
#define DT_N_S_mdio_P_suppress_preamble_EXISTS 1
#define DT_N_S_mdio_P_clock_frequency 2500000
#define DT_N_S_mdio_P_clock_frequency_EXISTS 1
#define DT_N_S_mdio_P_status "disabled"
#define DT_N_S_mdio_P_status_STRING_UNQUOTED disabled
#define DT_N_S_mdio_P_status_STRING_TOKEN disabled
#define DT_N_S_mdio_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_mdio_P_status_IDX_0 "disabled"
#define DT_N_S_mdio_P_status_IDX_0_EXISTS 1
#define DT_N_S_mdio_P_status_ENUM_IDX 2
#define DT_N_S_mdio_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_mdio_P_status_ENUM_TOKEN disabled
#define DT_N_S_mdio_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_mdio_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_mdio, status, 0)
#define DT_N_S_mdio_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_mdio, status, 0)
#define DT_N_S_mdio_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_mdio, status, 0, __VA_ARGS__)
#define DT_N_S_mdio_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_mdio, status, 0, __VA_ARGS__)
#define DT_N_S_mdio_P_status_LEN 1
#define DT_N_S_mdio_P_status_EXISTS 1
#define DT_N_S_mdio_P_compatible {"espressif,esp32-mdio"}
#define DT_N_S_mdio_P_compatible_IDX_0 "espressif,esp32-mdio"
#define DT_N_S_mdio_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-mdio
#define DT_N_S_mdio_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_mdio
#define DT_N_S_mdio_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_MDIO
#define DT_N_S_mdio_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_mdio_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_mdio, compatible, 0)
#define DT_N_S_mdio_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_mdio, compatible, 0)
#define DT_N_S_mdio_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_mdio, compatible, 0, __VA_ARGS__)
#define DT_N_S_mdio_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_mdio, compatible, 0, __VA_ARGS__)
#define DT_N_S_mdio_P_compatible_LEN 1
#define DT_N_S_mdio_P_compatible_EXISTS 1
#define DT_N_S_mdio_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_mdio_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_mdio_P_clocks_IDX_0_VAL_offset 23
#define DT_N_S_mdio_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_mdio_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_mdio, clocks, 0)
#define DT_N_S_mdio_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_mdio, clocks, 0)
#define DT_N_S_mdio_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_mdio, clocks, 0, __VA_ARGS__)
#define DT_N_S_mdio_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_mdio, clocks, 0, __VA_ARGS__)
#define DT_N_S_mdio_P_clocks_LEN 1
#define DT_N_S_mdio_P_clocks_EXISTS 1
#define DT_N_S_mdio_P_wakeup_source 0
#define DT_N_S_mdio_P_wakeup_source_EXISTS 1
#define DT_N_S_mdio_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_mdio_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /wifi
 *
 * Node identifier: DT_N_S_wifi
 *
 * Binding (compatible = espressif,esp32-wifi):
 *   $ZEPHYR_BASE/dts/bindings/wifi/espressif,esp32-wifi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_wifi_PATH "/wifi"

/* Node's name with unit-address: */
#define DT_N_S_wifi_FULL_NAME "wifi"

/* Node parent (/) identifier: */
#define DT_N_S_wifi_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_wifi_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_wifi_FOREACH_CHILD(fn) 
#define DT_N_S_wifi_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_wifi_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_wifi_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_wifi_ORD 8
#define DT_N_S_wifi_ORD_STR_SORTABLE 00008

/* Ordinals for what this node depends on directly: */
#define DT_N_S_wifi_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_wifi_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_wifi_EXISTS 1
#define DT_N_INST_0_espressif_esp32_wifi DT_N_S_wifi
#define DT_N_NODELABEL_wifi              DT_N_S_wifi

/* Macros for properties that are special in the specification: */
#define DT_N_S_wifi_REG_NUM 0
#define DT_N_S_wifi_RANGES_NUM 0
#define DT_N_S_wifi_FOREACH_RANGE(fn) 
#define DT_N_S_wifi_IRQ_NUM 0
#define DT_N_S_wifi_COMPAT_MATCHES_espressif_esp32_wifi 1
#define DT_N_S_wifi_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_wifi_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_wifi_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_wifi_COMPAT_MODEL_IDX_0 "esp32-wifi"
#define DT_N_S_wifi_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_wifi_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_wifi_P_compatible {"espressif,esp32-wifi"}
#define DT_N_S_wifi_P_compatible_IDX_0 "espressif,esp32-wifi"
#define DT_N_S_wifi_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-wifi
#define DT_N_S_wifi_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_wifi
#define DT_N_S_wifi_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_WIFI
#define DT_N_S_wifi_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_wifi, compatible, 0)
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_wifi, compatible, 0)
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_wifi, compatible, 0, __VA_ARGS__)
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_wifi, compatible, 0, __VA_ARGS__)
#define DT_N_S_wifi_P_compatible_LEN 1
#define DT_N_S_wifi_P_compatible_EXISTS 1
#define DT_N_S_wifi_P_status "disabled"
#define DT_N_S_wifi_P_status_STRING_UNQUOTED disabled
#define DT_N_S_wifi_P_status_STRING_TOKEN disabled
#define DT_N_S_wifi_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_wifi_P_status_IDX_0 "disabled"
#define DT_N_S_wifi_P_status_IDX_0_EXISTS 1
#define DT_N_S_wifi_P_status_ENUM_IDX 2
#define DT_N_S_wifi_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_wifi_P_status_ENUM_TOKEN disabled
#define DT_N_S_wifi_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_wifi, status, 0)
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_wifi, status, 0)
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_wifi, status, 0, __VA_ARGS__)
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_wifi, status, 0, __VA_ARGS__)
#define DT_N_S_wifi_P_status_LEN 1
#define DT_N_S_wifi_P_status_EXISTS 1

/*
 * Devicetree node: /soc/gpio
 *
 * Node identifier: DT_N_S_soc_S_gpio
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_PATH "/soc/gpio"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_FULL_NAME "gpio"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_CHILD_IDX 17

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800)
#define DT_N_S_soc_S_gpio_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800)
#define DT_N_S_soc_S_gpio_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800)
#define DT_N_S_soc_S_gpio_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800)
#define DT_N_S_soc_S_gpio_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_ORD 9
#define DT_N_S_soc_S_gpio_ORD_STR_SORTABLE 00009

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_SUPPORTS_ORDS \
	10, /* /soc/gpio/gpio@3ff44000 */ \
	78, /* /soc/gpio/gpio@3ff44800 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_EXISTS 1
#define DT_N_INST_1_simple_bus DT_N_S_soc_S_gpio
#define DT_N_NODELABEL_gpio    DT_N_S_soc_S_gpio

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_REG_NUM 0
#define DT_N_S_soc_S_gpio_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_S_gpio_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_P_compatible {"simple-bus"}
#define DT_N_S_soc_S_gpio_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_S_gpio_P_compatible_IDX_0_STRING_UNQUOTED simple-bus
#define DT_N_S_soc_S_gpio_P_compatible_IDX_0_STRING_TOKEN simple_bus
#define DT_N_S_soc_S_gpio_P_compatible_IDX_0_STRING_UPPER_TOKEN SIMPLE_BUS
#define DT_N_S_soc_S_gpio_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio, compatible, 0)
#define DT_N_S_soc_S_gpio_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio, compatible, 0)
#define DT_N_S_soc_S_gpio_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_P_ranges_EXISTS 1

/*
 * Devicetree node: /soc/gpio/gpio@3ff44000
 *
 * Node identifier: DT_N_S_soc_S_gpio_S_gpio_3ff44000
 *
 * Binding (compatible = espressif,esp32-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/espressif,esp32-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_PATH "/soc/gpio/gpio@3ff44000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_FULL_NAME "gpio@3ff44000"

/* Node parent (/soc/gpio) identifier: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_PARENT DT_N_S_soc_S_gpio

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_ORD 10
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_ORD_STR_SORTABLE 00010

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_REQUIRES_ORDS \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	9, /* /soc/gpio */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_SUPPORTS_ORDS \
	11, /* /buttons */ \
	12, /* /buttons/button_0 */ \
	13, /* /buttons/sw_0 */ \
	20, /* /leds */ \
	21, /* /leds/led_0 */ \
	48, /* /soc/i2c@3ff53000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_gpio DT_N_S_soc_S_gpio_S_gpio_3ff44000
#define DT_N_NODELABEL_gpio0             DT_N_S_soc_S_gpio_S_gpio_3ff44000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_REG_NUM 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_REG_IDX_0_VAL_ADDRESS 1072971776 /* 0x3ff44000 */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_REG_IDX_0_VAL_SIZE 2048 /* 0x800 */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_IRQ_IDX_0_VAL_irq 22
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_COMPAT_MATCHES_espressif_esp32_gpio 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_COMPAT_MODEL_IDX_0 "esp32-gpio"
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_reg {1072971776 /* 0x3ff44000 */, 2048 /* 0x800 */}
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_reg_IDX_0 1072971776
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_reg_IDX_1 2048
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_ngpios 32
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges {6 /* 0x6 */, 6 /* 0x6 */, 20 /* 0x14 */, 1 /* 0x1 */, 24 /* 0x18 */, 1 /* 0x1 */, 28 /* 0x1c */, 4 /* 0x4 */}
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_0 6
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_1 6
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_2 20
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_3 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_3_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_4 24
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_4_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_5 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_5_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_6 28
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_6_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_7 4
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_IDX_7_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 0) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 1) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 2) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 3) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 4) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 5) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 6) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 7)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 7)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 7, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, gpio_reserved_ranges, 7, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_LEN 8
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_gpio_reserved_ranges_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status "okay"
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, status, 0)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, status, 0)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_LEN 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_compatible {"espressif,esp32-gpio"}
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_compatible_IDX_0 "espressif,esp32-gpio"
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-gpio
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_gpio
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_GPIO
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, compatible, 0)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, compatible, 0)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_interrupts {22 /* 0x16 */}
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_interrupts_IDX_0 22
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, interrupt_parent, 0)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, interrupt_parent, 0)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_S_gpio_3ff44000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /buttons
 *
 * Node identifier: DT_N_S_buttons
 *
 * Binding (compatible = gpio-keys):
 *   $ZEPHYR_BASE/dts/bindings/input/gpio-keys.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_buttons_PATH "/buttons"

/* Node's name with unit-address: */
#define DT_N_S_buttons_FULL_NAME "buttons"

/* Node parent (/) identifier: */
#define DT_N_S_buttons_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_buttons_CHILD_IDX 8

/* Helper macros for child nodes of this node. */
#define DT_N_S_buttons_FOREACH_CHILD(fn) fn(DT_N_S_buttons_S_button_0) fn(DT_N_S_buttons_S_sw_0)
#define DT_N_S_buttons_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_buttons_S_button_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons_S_sw_0)
#define DT_N_S_buttons_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__) fn(DT_N_S_buttons_S_sw_0, __VA_ARGS__)
#define DT_N_S_buttons_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons_S_sw_0, __VA_ARGS__)
#define DT_N_S_buttons_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_buttons_S_button_0) fn(DT_N_S_buttons_S_sw_0)
#define DT_N_S_buttons_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_buttons_S_button_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons_S_sw_0)
#define DT_N_S_buttons_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__) fn(DT_N_S_buttons_S_sw_0, __VA_ARGS__)
#define DT_N_S_buttons_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons_S_sw_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_buttons_ORD 11
#define DT_N_S_buttons_ORD_STR_SORTABLE 00011

/* Ordinals for what this node depends on directly: */
#define DT_N_S_buttons_REQUIRES_ORDS \
	0, /* / */ \
	10, /* /soc/gpio/gpio@3ff44000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_buttons_SUPPORTS_ORDS \
	12, /* /buttons/button_0 */ \
	13, /* /buttons/sw_0 */

/* Existence and alternate IDs: */
#define DT_N_S_buttons_EXISTS 1
#define DT_N_INST_0_gpio_keys DT_N_S_buttons

/* Macros for properties that are special in the specification: */
#define DT_N_S_buttons_REG_NUM 0
#define DT_N_S_buttons_RANGES_NUM 0
#define DT_N_S_buttons_FOREACH_RANGE(fn) 
#define DT_N_S_buttons_IRQ_NUM 0
#define DT_N_S_buttons_COMPAT_MATCHES_gpio_keys 1
#define DT_N_S_buttons_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_buttons_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_buttons_P_debounce_interval_ms 30
#define DT_N_S_buttons_P_debounce_interval_ms_EXISTS 1
#define DT_N_S_buttons_P_polling_mode 0
#define DT_N_S_buttons_P_polling_mode_EXISTS 1
#define DT_N_S_buttons_P_compatible {"gpio-keys"}
#define DT_N_S_buttons_P_compatible_IDX_0 "gpio-keys"
#define DT_N_S_buttons_P_compatible_IDX_0_STRING_UNQUOTED gpio-keys
#define DT_N_S_buttons_P_compatible_IDX_0_STRING_TOKEN gpio_keys
#define DT_N_S_buttons_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_KEYS
#define DT_N_S_buttons_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_buttons_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_buttons, compatible, 0)
#define DT_N_S_buttons_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_buttons, compatible, 0)
#define DT_N_S_buttons_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_buttons, compatible, 0, __VA_ARGS__)
#define DT_N_S_buttons_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons, compatible, 0, __VA_ARGS__)
#define DT_N_S_buttons_P_compatible_LEN 1
#define DT_N_S_buttons_P_compatible_EXISTS 1
#define DT_N_S_buttons_P_wakeup_source 0
#define DT_N_S_buttons_P_wakeup_source_EXISTS 1
#define DT_N_S_buttons_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_buttons_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /buttons/button_0
 *
 * Node identifier: DT_N_S_buttons_S_button_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_buttons_S_button_0_PATH "/buttons/button_0"

/* Node's name with unit-address: */
#define DT_N_S_buttons_S_button_0_FULL_NAME "button_0"

/* Node parent (/buttons) identifier: */
#define DT_N_S_buttons_S_button_0_PARENT DT_N_S_buttons

/* Node's index in its parent's list of children: */
#define DT_N_S_buttons_S_button_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD(fn) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_buttons_S_button_0_ORD 12
#define DT_N_S_buttons_S_button_0_ORD_STR_SORTABLE 00012

/* Ordinals for what this node depends on directly: */
#define DT_N_S_buttons_S_button_0_REQUIRES_ORDS \
	10, /* /soc/gpio/gpio@3ff44000 */ \
	11, /* /buttons */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_buttons_S_button_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_buttons_S_button_0_EXISTS 1
#define DT_N_ALIAS_sw0         DT_N_S_buttons_S_button_0
#define DT_N_NODELABEL_button0 DT_N_S_buttons_S_button_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_buttons_S_button_0_REG_NUM 0
#define DT_N_S_buttons_S_button_0_RANGES_NUM 0
#define DT_N_S_buttons_S_button_0_FOREACH_RANGE(fn) 
#define DT_N_S_buttons_S_button_0_IRQ_NUM 0
#define DT_N_S_buttons_S_button_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_buttons_S_button_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_S_gpio_3ff44000
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_pin 0
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_flags 17
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_buttons_S_button_0, gpios, 0)
#define DT_N_S_buttons_S_button_0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_buttons_S_button_0, gpios, 0)
#define DT_N_S_buttons_S_button_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_buttons_S_button_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_button_0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_button_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_button_0_P_gpios_LEN 1
#define DT_N_S_buttons_S_button_0_P_gpios_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_label "BOOT Button"
#define DT_N_S_buttons_S_button_0_P_label_STRING_UNQUOTED BOOT Button
#define DT_N_S_buttons_S_button_0_P_label_STRING_TOKEN BOOT_Button
#define DT_N_S_buttons_S_button_0_P_label_STRING_UPPER_TOKEN BOOT_BUTTON
#define DT_N_S_buttons_S_button_0_P_label_IDX_0 "BOOT Button"
#define DT_N_S_buttons_S_button_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_buttons_S_button_0, label, 0)
#define DT_N_S_buttons_S_button_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_buttons_S_button_0, label, 0)
#define DT_N_S_buttons_S_button_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_buttons_S_button_0, label, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_button_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_button_0, label, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_button_0_P_label_LEN 1
#define DT_N_S_buttons_S_button_0_P_label_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_zephyr_code 11
#define DT_N_S_buttons_S_button_0_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /buttons/sw_0
 *
 * Node identifier: DT_N_S_buttons_S_sw_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_buttons_S_sw_0_PATH "/buttons/sw_0"

/* Node's name with unit-address: */
#define DT_N_S_buttons_S_sw_0_FULL_NAME "sw_0"

/* Node parent (/buttons) identifier: */
#define DT_N_S_buttons_S_sw_0_PARENT DT_N_S_buttons

/* Node's index in its parent's list of children: */
#define DT_N_S_buttons_S_sw_0_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_buttons_S_sw_0_FOREACH_CHILD(fn) 
#define DT_N_S_buttons_S_sw_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_buttons_S_sw_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_buttons_S_sw_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_buttons_S_sw_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_buttons_S_sw_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_buttons_S_sw_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_buttons_S_sw_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_buttons_S_sw_0_ORD 13
#define DT_N_S_buttons_S_sw_0_ORD_STR_SORTABLE 00013

/* Ordinals for what this node depends on directly: */
#define DT_N_S_buttons_S_sw_0_REQUIRES_ORDS \
	10, /* /soc/gpio/gpio@3ff44000 */ \
	11, /* /buttons */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_buttons_S_sw_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_buttons_S_sw_0_EXISTS 1
#define DT_N_ALIAS_sw      DT_N_S_buttons_S_sw_0
#define DT_N_NODELABEL_sw0 DT_N_S_buttons_S_sw_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_buttons_S_sw_0_REG_NUM 0
#define DT_N_S_buttons_S_sw_0_RANGES_NUM 0
#define DT_N_S_buttons_S_sw_0_FOREACH_RANGE(fn) 
#define DT_N_S_buttons_S_sw_0_IRQ_NUM 0
#define DT_N_S_buttons_S_sw_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_buttons_S_sw_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_buttons_S_sw_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_buttons_S_sw_0_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_S_gpio_3ff44000
#define DT_N_S_buttons_S_sw_0_P_gpios_IDX_0_VAL_pin 4
#define DT_N_S_buttons_S_sw_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_buttons_S_sw_0_P_gpios_IDX_0_VAL_flags 17
#define DT_N_S_buttons_S_sw_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_buttons_S_sw_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_buttons_S_sw_0, gpios, 0)
#define DT_N_S_buttons_S_sw_0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_buttons_S_sw_0, gpios, 0)
#define DT_N_S_buttons_S_sw_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_buttons_S_sw_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_sw_0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_sw_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_sw_0_P_gpios_LEN 1
#define DT_N_S_buttons_S_sw_0_P_gpios_EXISTS 1
#define DT_N_S_buttons_S_sw_0_P_label "Button 0"
#define DT_N_S_buttons_S_sw_0_P_label_STRING_UNQUOTED Button 0
#define DT_N_S_buttons_S_sw_0_P_label_STRING_TOKEN Button_0
#define DT_N_S_buttons_S_sw_0_P_label_STRING_UPPER_TOKEN BUTTON_0
#define DT_N_S_buttons_S_sw_0_P_label_IDX_0 "Button 0"
#define DT_N_S_buttons_S_sw_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_buttons_S_sw_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_buttons_S_sw_0, label, 0)
#define DT_N_S_buttons_S_sw_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_buttons_S_sw_0, label, 0)
#define DT_N_S_buttons_S_sw_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_buttons_S_sw_0, label, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_sw_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_sw_0, label, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_sw_0_P_label_LEN 1
#define DT_N_S_buttons_S_sw_0_P_label_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1) fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_cpu_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1) fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_cpu_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 14
#define DT_N_S_cpus_ORD_STR_SORTABLE 00014

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	15, /* /cpus/power-states */ \
	18, /* /cpus/cpu@0 */ \
	19, /* /cpus/cpu@1 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/power-states
 *
 * Node identifier: DT_N_S_cpus_S_power_states
 */

/* Node's full path: */
#define DT_N_S_cpus_S_power_states_PATH "/cpus/power-states"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_power_states_FULL_NAME "power-states"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_power_states_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_power_states_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_power_states_S_light_sleep) fn(DT_N_S_cpus_S_power_states_S_deep_sleep)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_light_sleep) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_deep_sleep)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_light_sleep, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_light_sleep, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_deep_sleep, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_power_states_S_light_sleep) fn(DT_N_S_cpus_S_power_states_S_deep_sleep)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_light_sleep) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_deep_sleep)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_light_sleep, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_light_sleep, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_deep_sleep, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_power_states_ORD 15
#define DT_N_S_cpus_S_power_states_ORD_STR_SORTABLE 00015

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_power_states_REQUIRES_ORDS \
	14, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_power_states_SUPPORTS_ORDS \
	16, /* /cpus/power-states/deep_sleep */ \
	17, /* /cpus/power-states/light_sleep */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_power_states_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_power_states_REG_NUM 0
#define DT_N_S_cpus_S_power_states_RANGES_NUM 0
#define DT_N_S_cpus_S_power_states_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_power_states_IRQ_NUM 0
#define DT_N_S_cpus_S_power_states_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_power_states_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/power-states/deep_sleep
 *
 * Node identifier: DT_N_S_cpus_S_power_states_S_deep_sleep
 *
 * Binding (compatible = zephyr,power-state):
 *   $ZEPHYR_BASE/dts/bindings/power/zephyr,power-state.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_PATH "/cpus/power-states/deep_sleep"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FULL_NAME "deep_sleep"

/* Node parent (/cpus/power-states) identifier: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_PARENT DT_N_S_cpus_S_power_states

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_ORD 16
#define DT_N_S_cpus_S_power_states_S_deep_sleep_ORD_STR_SORTABLE 00016

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_REQUIRES_ORDS \
	15, /* /cpus/power-states */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_SUPPORTS_ORDS \
	18, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_EXISTS 1
#define DT_N_INST_1_zephyr_power_state DT_N_S_cpus_S_power_states_S_deep_sleep
#define DT_N_NODELABEL_deep_sleep      DT_N_S_cpus_S_power_states_S_deep_sleep

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_REG_NUM 0
#define DT_N_S_cpus_S_power_states_S_deep_sleep_RANGES_NUM 0
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_IRQ_NUM 0
#define DT_N_S_cpus_S_power_states_S_deep_sleep_COMPAT_MATCHES_zephyr_power_state 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_cpus_S_power_states_S_deep_sleep_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_COMPAT_MODEL_IDX_0 "power-state"
#define DT_N_S_cpus_S_power_states_S_deep_sleep_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name "soft-off"
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_STRING_UNQUOTED soft-off
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_STRING_TOKEN soft_off
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_STRING_UPPER_TOKEN SOFT_OFF
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_IDX_0 "soft-off"
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_ENUM_IDX 6
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_ENUM_VAL_soft_off_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_ENUM_TOKEN soft_off
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_ENUM_UPPER_TOKEN SOFT_OFF
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_LEN 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_min_residency_us 2000
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_min_residency_us_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_exit_latency_us 212
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_exit_latency_us_EXISTS 1

/*
 * Devicetree node: /cpus/power-states/light_sleep
 *
 * Node identifier: DT_N_S_cpus_S_power_states_S_light_sleep
 *
 * Binding (compatible = zephyr,power-state):
 *   $ZEPHYR_BASE/dts/bindings/power/zephyr,power-state.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_PATH "/cpus/power-states/light_sleep"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_FULL_NAME "light_sleep"

/* Node parent (/cpus/power-states) identifier: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_PARENT DT_N_S_cpus_S_power_states

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_ORD 17
#define DT_N_S_cpus_S_power_states_S_light_sleep_ORD_STR_SORTABLE 00017

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_REQUIRES_ORDS \
	15, /* /cpus/power-states */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_SUPPORTS_ORDS \
	18, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_EXISTS 1
#define DT_N_INST_0_zephyr_power_state DT_N_S_cpus_S_power_states_S_light_sleep
#define DT_N_NODELABEL_light_sleep     DT_N_S_cpus_S_power_states_S_light_sleep

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_REG_NUM 0
#define DT_N_S_cpus_S_power_states_S_light_sleep_RANGES_NUM 0
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_IRQ_NUM 0
#define DT_N_S_cpus_S_power_states_S_light_sleep_COMPAT_MATCHES_zephyr_power_state 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_cpus_S_power_states_S_light_sleep_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_COMPAT_MODEL_IDX_0 "power-state"
#define DT_N_S_cpus_S_power_states_S_light_sleep_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name "standby"
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_STRING_UNQUOTED standby
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_STRING_TOKEN standby
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_STRING_UPPER_TOKEN STANDBY
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_IDX_0 "standby"
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_ENUM_IDX 3
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_ENUM_VAL_standby_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_ENUM_TOKEN standby
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_ENUM_UPPER_TOKEN STANDBY
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_power_states_S_light_sleep, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_light_sleep, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_light_sleep, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_light_sleep, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_LEN 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_min_residency_us 200
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_min_residency_us_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_exit_latency_us 60
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_exit_latency_us_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = cdns,tensilica-xtensa-lx6):
 *   $ZEPHYR_BASE/dts/bindings/cpu/cdns,tensilica-xtensa-lx6.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 18
#define DT_N_S_cpus_S_cpu_0_ORD_STR_SORTABLE 00018

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	14, /* /cpus */ \
	16, /* /cpus/power-states/deep_sleep */ \
	17, /* /cpus/power-states/light_sleep */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_cdns_tensilica_xtensa_lx6 DT_N_S_cpus_S_cpu_0
#define DT_N_NODELABEL_cpu0                   DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_cdns_tensilica_xtensa_lx6 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0 "Cadence Design Systems Inc."
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0 "tensilica-xtensa-lx6"
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency 240000000
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0 DT_N_S_cpus_S_power_states_S_light_sleep
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0_PH DT_N_S_cpus_S_power_states_S_light_sleep
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1 DT_N_S_cpus_S_power_states_S_deep_sleep
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1_PH DT_N_S_cpus_S_power_states_S_deep_sleep
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0) \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_LEN 2
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"cdns,tensilica-xtensa-lx6"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "cdns,tensilica-xtensa-lx6"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UNQUOTED cdns,tensilica-xtensa-lx6
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_TOKEN cdns_tensilica_xtensa_lx6
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UPPER_TOKEN CDNS_TENSILICA_XTENSA_LX6
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@1
 *
 * Node identifier: DT_N_S_cpus_S_cpu_1
 *
 * Binding (compatible = cdns,tensilica-xtensa-lx6):
 *   $ZEPHYR_BASE/dts/bindings/cpu/cdns,tensilica-xtensa-lx6.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_1_PATH "/cpus/cpu@1"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_1_FULL_NAME "cpu@1"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_1_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_1_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_1_ORD 19
#define DT_N_S_cpus_S_cpu_1_ORD_STR_SORTABLE 00019

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_1_REQUIRES_ORDS \
	14, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_1_EXISTS 1
#define DT_N_INST_1_cdns_tensilica_xtensa_lx6 DT_N_S_cpus_S_cpu_1
#define DT_N_NODELABEL_cpu1                   DT_N_S_cpus_S_cpu_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_1_REG_NUM 1
#define DT_N_S_cpus_S_cpu_1_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_REG_IDX_0_VAL_ADDRESS 1 /* 0x1 */
#define DT_N_S_cpus_S_cpu_1_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_1_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_1_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_1_COMPAT_MATCHES_cdns_tensilica_xtensa_lx6 1
#define DT_N_S_cpus_S_cpu_1_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_COMPAT_VENDOR_IDX_0 "Cadence Design Systems Inc."
#define DT_N_S_cpus_S_cpu_1_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_COMPAT_MODEL_IDX_0 "tensilica-xtensa-lx6"
#define DT_N_S_cpus_S_cpu_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_1_P_clock_frequency 240000000
#define DT_N_S_cpus_S_cpu_1_P_clock_frequency_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_compatible {"cdns,tensilica-xtensa-lx6"}
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0 "cdns,tensilica-xtensa-lx6"
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0_STRING_UNQUOTED cdns,tensilica-xtensa-lx6
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0_STRING_TOKEN cdns_tensilica_xtensa_lx6
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0_STRING_UPPER_TOKEN CDNS_TENSILICA_XTENSA_LX6
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, compatible, 0)
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_1, compatible, 0)
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_1_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_reg {1 /* 0x1 */}
#define DT_N_S_cpus_S_cpu_1_P_reg_IDX_0 1
#define DT_N_S_cpus_S_cpu_1_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_1_P_wakeup_source_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_cpus_S_cpu_1_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /leds
 *
 * Node identifier: DT_N_S_leds
 *
 * Binding (compatible = gpio-leds):
 *   $ZEPHYR_BASE/dts/bindings/led/gpio-leds.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_PATH "/leds"

/* Node's name with unit-address: */
#define DT_N_S_leds_FULL_NAME "leds"

/* Node parent (/) identifier: */
#define DT_N_S_leds_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_CHILD_IDX 9

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_FOREACH_CHILD(fn) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_leds_ORD 20
#define DT_N_S_leds_ORD_STR_SORTABLE 00020

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_REQUIRES_ORDS \
	0, /* / */ \
	10, /* /soc/gpio/gpio@3ff44000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_SUPPORTS_ORDS \
	21, /* /leds/led_0 */

/* Existence and alternate IDs: */
#define DT_N_S_leds_EXISTS 1
#define DT_N_INST_0_gpio_leds DT_N_S_leds

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_REG_NUM 0
#define DT_N_S_leds_RANGES_NUM 0
#define DT_N_S_leds_FOREACH_RANGE(fn) 
#define DT_N_S_leds_IRQ_NUM 0
#define DT_N_S_leds_COMPAT_MATCHES_gpio_leds 1
#define DT_N_S_leds_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_P_compatible {"gpio-leds"}
#define DT_N_S_leds_P_compatible_IDX_0 "gpio-leds"
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UNQUOTED gpio-leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_TOKEN gpio_leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_LEDS
#define DT_N_S_leds_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_LEN 1
#define DT_N_S_leds_P_compatible_EXISTS 1

/*
 * Devicetree node: /leds/led_0
 *
 * Node identifier: DT_N_S_leds_S_led_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_0_PATH "/leds/led_0"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_0_FULL_NAME "led_0"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_0_PARENT DT_N_S_leds

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_S_led_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_S_led_0_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_0_ORD 21
#define DT_N_S_leds_S_led_0_ORD_STR_SORTABLE 00021

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_0_REQUIRES_ORDS \
	10, /* /soc/gpio/gpio@3ff44000 */ \
	20, /* /leds */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_0_EXISTS 1
#define DT_N_ALIAS_led0         DT_N_S_leds_S_led_0
#define DT_N_NODELABEL_led_blue DT_N_S_leds_S_led_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_0_REG_NUM 0
#define DT_N_S_leds_S_led_0_RANGES_NUM 0
#define DT_N_S_leds_S_led_0_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_0_IRQ_NUM 0
#define DT_N_S_leds_S_led_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_S_gpio_3ff44000
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin 2
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_LEN 1
#define DT_N_S_leds_S_led_0_P_gpios_EXISTS 1

/*
 * Devicetree node: /pin-controller
 *
 * Node identifier: DT_N_S_pin_controller
 *
 * Binding (compatible = espressif,esp32-pinctrl):
 *   $ZEPHYR_BASE/dts/bindings/pinctrl/espressif,esp32-pinctrl.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_PATH "/pin-controller"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_FULL_NAME "pin-controller"

/* Node parent (/) identifier: */
#define DT_N_S_pin_controller_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_CHILD_IDX 7

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_uart0_default) fn(DT_N_S_pin_controller_S_uart1_default) fn(DT_N_S_pin_controller_S_uart2_default) fn(DT_N_S_pin_controller_S_spim2_default) fn(DT_N_S_pin_controller_S_spim3_default) fn(DT_N_S_pin_controller_S_i2c0_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart1_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart2_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim3_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_i2c0_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart1_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart2_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim3_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__)
#define DT_N_S_pin_controller_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart1_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart2_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim3_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_uart0_default) fn(DT_N_S_pin_controller_S_uart1_default) fn(DT_N_S_pin_controller_S_uart2_default) fn(DT_N_S_pin_controller_S_spim2_default) fn(DT_N_S_pin_controller_S_spim3_default) fn(DT_N_S_pin_controller_S_i2c0_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart1_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart2_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim3_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_i2c0_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart1_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart2_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim3_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart1_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart2_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim3_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_ORD 22
#define DT_N_S_pin_controller_ORD_STR_SORTABLE 00022

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_SUPPORTS_ORDS \
	23, /* /pin-controller/i2c0_default */ \
	25, /* /pin-controller/spim2_default */ \
	28, /* /pin-controller/spim3_default */ \
	31, /* /pin-controller/uart0_default */ \
	34, /* /pin-controller/uart1_default */ \
	37, /* /pin-controller/uart2_default */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_EXISTS 1
#define DT_N_INST_0_espressif_esp32_pinctrl DT_N_S_pin_controller
#define DT_N_NODELABEL_pinctrl              DT_N_S_pin_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_REG_NUM 0
#define DT_N_S_pin_controller_RANGES_NUM 0
#define DT_N_S_pin_controller_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_IRQ_NUM 0
#define DT_N_S_pin_controller_COMPAT_MATCHES_espressif_esp32_pinctrl 1
#define DT_N_S_pin_controller_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_pin_controller_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_COMPAT_MODEL_IDX_0 "esp32-pinctrl"
#define DT_N_S_pin_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_P_status "okay"
#define DT_N_S_pin_controller_P_status_STRING_UNQUOTED okay
#define DT_N_S_pin_controller_P_status_STRING_TOKEN okay
#define DT_N_S_pin_controller_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_pin_controller_P_status_IDX_0 "okay"
#define DT_N_S_pin_controller_P_status_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_P_status_ENUM_IDX 1
#define DT_N_S_pin_controller_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_pin_controller_P_status_ENUM_TOKEN okay
#define DT_N_S_pin_controller_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_pin_controller_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller, status, 0)
#define DT_N_S_pin_controller_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller, status, 0)
#define DT_N_S_pin_controller_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller, status, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller, status, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_P_status_LEN 1
#define DT_N_S_pin_controller_P_status_EXISTS 1
#define DT_N_S_pin_controller_P_compatible {"espressif,esp32-pinctrl"}
#define DT_N_S_pin_controller_P_compatible_IDX_0 "espressif,esp32-pinctrl"
#define DT_N_S_pin_controller_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-pinctrl
#define DT_N_S_pin_controller_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_pinctrl
#define DT_N_S_pin_controller_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_PINCTRL
#define DT_N_S_pin_controller_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller, compatible, 0)
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller, compatible, 0)
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_P_compatible_LEN 1
#define DT_N_S_pin_controller_P_compatible_EXISTS 1
#define DT_N_S_pin_controller_P_wakeup_source 0
#define DT_N_S_pin_controller_P_wakeup_source_EXISTS 1
#define DT_N_S_pin_controller_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_pin_controller_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /pin-controller/i2c0_default
 *
 * Node identifier: DT_N_S_pin_controller_S_i2c0_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_i2c0_default_PATH "/pin-controller/i2c0_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_i2c0_default_FULL_NAME "i2c0_default"

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_i2c0_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_i2c0_default_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_i2c0_default_ORD 23
#define DT_N_S_pin_controller_S_i2c0_default_ORD_STR_SORTABLE 00023

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_i2c0_default_REQUIRES_ORDS \
	22, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_i2c0_default_SUPPORTS_ORDS \
	24, /* /pin-controller/i2c0_default/group1 */ \
	48, /* /soc/i2c@3ff53000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_i2c0_default_EXISTS 1
#define DT_N_NODELABEL_i2c0_default DT_N_S_pin_controller_S_i2c0_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_i2c0_default_REG_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_i2c0_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_i2c0_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /pin-controller/i2c0_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_i2c0_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_PATH "/pin-controller/i2c0_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FULL_NAME "group1"

/* Node parent (/pin-controller/i2c0_default) identifier: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_PARENT DT_N_S_pin_controller_S_i2c0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_ORD 24
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_ORD_STR_SORTABLE 00024

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_REQUIRES_ORDS \
	23, /* /pin-controller/i2c0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux {984981 /* 0xf0795 */, 952150 /* 0xe8756 */}
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_IDX_0 984981
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_IDX_1 952150
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 0) \
	fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 1)
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 1)
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_LEN 2
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_disable 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_up 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_drive_open_drain 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_input_enable 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_enable 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_low 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_high 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/spim2_default
 *
 * Node identifier: DT_N_S_pin_controller_S_spim2_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_spim2_default_PATH "/pin-controller/spim2_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_spim2_default_FULL_NAME "spim2_default"

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_spim2_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_spim2_default_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) fn(DT_N_S_pin_controller_S_spim2_default_S_group2)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default_S_group2)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) fn(DT_N_S_pin_controller_S_spim2_default_S_group2)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default_S_group2)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_spim2_default_ORD 25
#define DT_N_S_pin_controller_S_spim2_default_ORD_STR_SORTABLE 00025

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_spim2_default_REQUIRES_ORDS \
	22, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_spim2_default_SUPPORTS_ORDS \
	26, /* /pin-controller/spim2_default/group1 */ \
	27, /* /pin-controller/spim2_default/group2 */ \
	61, /* /soc/spi@3ff64000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_spim2_default_EXISTS 1
#define DT_N_NODELABEL_spim2_default DT_N_S_pin_controller_S_spim2_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_spim2_default_REG_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_spim2_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_spim2_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /pin-controller/spim2_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_spim2_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_PATH "/pin-controller/spim2_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FULL_NAME "group1"

/* Node parent (/pin-controller/spim2_default) identifier: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_PARENT DT_N_S_pin_controller_S_spim2_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_ORD 26
#define DT_N_S_pin_controller_S_spim2_default_S_group1_ORD_STR_SORTABLE 00026

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_REQUIRES_ORDS \
	25, /* /pin-controller/spim2_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux {16745036 /* 0xff824c */, 294862 /* 0x47fce */, 393167 /* 0x5ffcf */}
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_0 16745036
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_1 294862
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_2 393167
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_2_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 0) \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 1) \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 2)
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 2)
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 1, __VA_ARGS__) \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_LEN 3
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_disable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_input_enable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_enable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_low 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_high 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/spim2_default/group2
 *
 * Node identifier: DT_N_S_pin_controller_S_spim2_default_S_group2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_PATH "/pin-controller/spim2_default/group2"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FULL_NAME "group2"

/* Node parent (/pin-controller/spim2_default) identifier: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_PARENT DT_N_S_pin_controller_S_spim2_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_ORD 27
#define DT_N_S_pin_controller_S_spim2_default_S_group2_ORD_STR_SORTABLE 00027

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_REQUIRES_ORDS \
	25, /* /pin-controller/spim2_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_REG_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_RANGES_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_IRQ_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux {360397 /* 0x57fcd */}
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_IDX_0 360397
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_LEN 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_disable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_input_enable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_enable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_low 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_high 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/spim3_default
 *
 * Node identifier: DT_N_S_pin_controller_S_spim3_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_spim3_default_PATH "/pin-controller/spim3_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_spim3_default_FULL_NAME "spim3_default"

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_spim3_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_spim3_default_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_spim3_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_spim3_default_S_group1) fn(DT_N_S_pin_controller_S_spim3_default_S_group2)
#define DT_N_S_pin_controller_S_spim3_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim3_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim3_default_S_group2)
#define DT_N_S_pin_controller_S_spim3_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim3_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim3_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim3_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim3_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim3_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim3_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_spim3_default_S_group1) fn(DT_N_S_pin_controller_S_spim3_default_S_group2)
#define DT_N_S_pin_controller_S_spim3_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim3_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim3_default_S_group2)
#define DT_N_S_pin_controller_S_spim3_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim3_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim3_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim3_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim3_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim3_default_S_group2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_spim3_default_ORD 28
#define DT_N_S_pin_controller_S_spim3_default_ORD_STR_SORTABLE 00028

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_spim3_default_REQUIRES_ORDS \
	22, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_spim3_default_SUPPORTS_ORDS \
	29, /* /pin-controller/spim3_default/group1 */ \
	30, /* /pin-controller/spim3_default/group2 */ \
	62, /* /soc/spi@3ff65000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_spim3_default_EXISTS 1
#define DT_N_NODELABEL_spim3_default DT_N_S_pin_controller_S_spim3_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_spim3_default_REG_NUM 0
#define DT_N_S_pin_controller_S_spim3_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_spim3_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_spim3_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_spim3_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_spim3_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /pin-controller/spim3_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_spim3_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_spim3_default_S_group1_PATH "/pin-controller/spim3_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_spim3_default_S_group1_FULL_NAME "group1"

/* Node parent (/pin-controller/spim3_default) identifier: */
#define DT_N_S_pin_controller_S_spim3_default_S_group1_PARENT DT_N_S_pin_controller_S_spim3_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_spim3_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_spim3_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_spim3_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim3_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim3_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_spim3_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_spim3_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim3_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim3_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_spim3_default_S_group1_ORD 29
#define DT_N_S_pin_controller_S_spim3_default_S_group1_ORD_STR_SORTABLE 00029

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_spim3_default_S_group1_REQUIRES_ORDS \
	28, /* /pin-controller/spim3_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_spim3_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_spim3_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_spim3_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_spim3_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_spim3_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_spim3_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_spim3_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_spim3_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_pinmux {16748563 /* 0xff9013 */, 2097106 /* 0x1fffd2 */, 2260933 /* 0x227fc5 */}
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_pinmux_IDX_0 16748563
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_pinmux_IDX_1 2097106
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_pinmux_IDX_2 2260933
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_pinmux_IDX_2_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_spim3_default_S_group1, pinmux, 0) \
	fn(DT_N_S_pin_controller_S_spim3_default_S_group1, pinmux, 1) \
	fn(DT_N_S_pin_controller_S_spim3_default_S_group1, pinmux, 2)
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim3_default_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_spim3_default_S_group1, pinmux, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_spim3_default_S_group1, pinmux, 2)
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim3_default_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_pin_controller_S_spim3_default_S_group1, pinmux, 1, __VA_ARGS__) \
	fn(DT_N_S_pin_controller_S_spim3_default_S_group1, pinmux, 2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim3_default_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_spim3_default_S_group1, pinmux, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_spim3_default_S_group1, pinmux, 2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_pinmux_LEN 3
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_bias_disable 0
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_input_enable 0
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_output_enable 0
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_output_low 0
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_output_high 0
#define DT_N_S_pin_controller_S_spim3_default_S_group1_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/spim3_default/group2
 *
 * Node identifier: DT_N_S_pin_controller_S_spim3_default_S_group2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_spim3_default_S_group2_PATH "/pin-controller/spim3_default/group2"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_spim3_default_S_group2_FULL_NAME "group2"

/* Node parent (/pin-controller/spim3_default) identifier: */
#define DT_N_S_pin_controller_S_spim3_default_S_group2_PARENT DT_N_S_pin_controller_S_spim3_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_spim3_default_S_group2_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_spim3_default_S_group2_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_spim3_default_S_group2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim3_default_S_group2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim3_default_S_group2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_spim3_default_S_group2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_spim3_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim3_default_S_group2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim3_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_spim3_default_S_group2_ORD 30
#define DT_N_S_pin_controller_S_spim3_default_S_group2_ORD_STR_SORTABLE 00030

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_spim3_default_S_group2_REQUIRES_ORDS \
	28, /* /pin-controller/spim3_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_spim3_default_S_group2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_spim3_default_S_group2_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_spim3_default_S_group2_REG_NUM 0
#define DT_N_S_pin_controller_S_spim3_default_S_group2_RANGES_NUM 0
#define DT_N_S_pin_controller_S_spim3_default_S_group2_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_spim3_default_S_group2_IRQ_NUM 0
#define DT_N_S_pin_controller_S_spim3_default_S_group2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_spim3_default_S_group2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_pinmux {2162647 /* 0x20ffd7 */}
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_pinmux_IDX_0 2162647
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_spim3_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim3_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim3_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim3_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_pinmux_LEN 1
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_bias_disable 0
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_input_enable 0
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_output_enable 0
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_output_low 1
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_output_high 0
#define DT_N_S_pin_controller_S_spim3_default_S_group2_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/uart0_default
 *
 * Node identifier: DT_N_S_pin_controller_S_uart0_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart0_default_PATH "/pin-controller/uart0_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart0_default_FULL_NAME "uart0_default"

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_uart0_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart0_default_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) fn(DT_N_S_pin_controller_S_uart0_default_S_group2)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart0_default_S_group2)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) fn(DT_N_S_pin_controller_S_uart0_default_S_group2)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart0_default_S_group2)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart0_default_ORD 31
#define DT_N_S_pin_controller_S_uart0_default_ORD_STR_SORTABLE 00031

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart0_default_REQUIRES_ORDS \
	22, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart0_default_SUPPORTS_ORDS \
	32, /* /pin-controller/uart0_default/group1 */ \
	33, /* /pin-controller/uart0_default/group2 */ \
	65, /* /soc/uart@3ff40000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart0_default_EXISTS 1
#define DT_N_NODELABEL_uart0_default DT_N_S_pin_controller_S_uart0_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart0_default_REG_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart0_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart0_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /pin-controller/uart0_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_uart0_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_PATH "/pin-controller/uart0_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FULL_NAME "group1"

/* Node parent (/pin-controller/uart0_default) identifier: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_PARENT DT_N_S_pin_controller_S_uart0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_ORD 32
#define DT_N_S_pin_controller_S_uart0_default_S_group1_ORD_STR_SORTABLE 00032

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_REQUIRES_ORDS \
	31, /* /pin-controller/uart0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux {491457 /* 0x77fc1 */}
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_IDX_0 491457
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, pinmux, 0)
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, pinmux, 0)
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_LEN 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_disable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_input_enable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_enable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_low 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_high 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/uart0_default/group2
 *
 * Node identifier: DT_N_S_pin_controller_S_uart0_default_S_group2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_PATH "/pin-controller/uart0_default/group2"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FULL_NAME "group2"

/* Node parent (/pin-controller/uart0_default) identifier: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_PARENT DT_N_S_pin_controller_S_uart0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_ORD 33
#define DT_N_S_pin_controller_S_uart0_default_S_group2_ORD_STR_SORTABLE 00033

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_REQUIRES_ORDS \
	31, /* /pin-controller/uart0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_REG_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux {16745347 /* 0xff8383 */}
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_IDX_0 16745347
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_LEN 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_disable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_up 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_input_enable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_enable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_low 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_high 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/uart1_default
 *
 * Node identifier: DT_N_S_pin_controller_S_uart1_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart1_default_PATH "/pin-controller/uart1_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart1_default_FULL_NAME "uart1_default"

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_uart1_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart1_default_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart1_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_uart1_default_S_group1) fn(DT_N_S_pin_controller_S_uart1_default_S_group2)
#define DT_N_S_pin_controller_S_uart1_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart1_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart1_default_S_group2)
#define DT_N_S_pin_controller_S_uart1_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart1_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart1_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart1_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart1_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart1_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart1_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_uart1_default_S_group1) fn(DT_N_S_pin_controller_S_uart1_default_S_group2)
#define DT_N_S_pin_controller_S_uart1_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart1_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart1_default_S_group2)
#define DT_N_S_pin_controller_S_uart1_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart1_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart1_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart1_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart1_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart1_default_S_group2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart1_default_ORD 34
#define DT_N_S_pin_controller_S_uart1_default_ORD_STR_SORTABLE 00034

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart1_default_REQUIRES_ORDS \
	22, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart1_default_SUPPORTS_ORDS \
	35, /* /pin-controller/uart1_default/group1 */ \
	36, /* /pin-controller/uart1_default/group2 */ \
	66, /* /soc/uart@3ff50000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart1_default_EXISTS 1
#define DT_N_NODELABEL_uart1_default DT_N_S_pin_controller_S_uart1_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart1_default_REG_NUM 0
#define DT_N_S_pin_controller_S_uart1_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart1_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart1_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart1_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart1_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /pin-controller/uart1_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_uart1_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart1_default_S_group1_PATH "/pin-controller/uart1_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart1_default_S_group1_FULL_NAME "group1"

/* Node parent (/pin-controller/uart1_default) identifier: */
#define DT_N_S_pin_controller_S_uart1_default_S_group1_PARENT DT_N_S_pin_controller_S_uart1_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart1_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart1_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_uart1_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart1_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart1_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_uart1_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_uart1_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart1_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart1_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart1_default_S_group1_ORD 35
#define DT_N_S_pin_controller_S_uart1_default_S_group1_ORD_STR_SORTABLE 00035

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart1_default_S_group1_REQUIRES_ORDS \
	34, /* /pin-controller/uart1_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart1_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart1_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart1_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_uart1_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart1_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart1_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart1_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart1_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_pinmux {589770 /* 0x8ffca */}
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_pinmux_IDX_0 589770
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_uart1_default_S_group1, pinmux, 0)
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart1_default_S_group1, pinmux, 0)
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart1_default_S_group1, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart1_default_S_group1, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_pinmux_LEN 1
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_bias_disable 0
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_input_enable 0
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_output_enable 0
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_output_low 0
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_output_high 0
#define DT_N_S_pin_controller_S_uart1_default_S_group1_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/uart1_default/group2
 *
 * Node identifier: DT_N_S_pin_controller_S_uart1_default_S_group2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart1_default_S_group2_PATH "/pin-controller/uart1_default/group2"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart1_default_S_group2_FULL_NAME "group2"

/* Node parent (/pin-controller/uart1_default) identifier: */
#define DT_N_S_pin_controller_S_uart1_default_S_group2_PARENT DT_N_S_pin_controller_S_uart1_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart1_default_S_group2_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart1_default_S_group2_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_uart1_default_S_group2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart1_default_S_group2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart1_default_S_group2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_uart1_default_S_group2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_uart1_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart1_default_S_group2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart1_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart1_default_S_group2_ORD 36
#define DT_N_S_pin_controller_S_uart1_default_S_group2_ORD_STR_SORTABLE 00036

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart1_default_S_group2_REQUIRES_ORDS \
	34, /* /pin-controller/uart1_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart1_default_S_group2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart1_default_S_group2_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart1_default_S_group2_REG_NUM 0
#define DT_N_S_pin_controller_S_uart1_default_S_group2_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart1_default_S_group2_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart1_default_S_group2_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart1_default_S_group2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart1_default_S_group2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_pinmux {16745545 /* 0xff8449 */}
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_pinmux_IDX_0 16745545
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_uart1_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart1_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart1_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart1_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_pinmux_LEN 1
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_bias_disable 0
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_bias_pull_up 1
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_input_enable 0
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_output_enable 0
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_output_low 0
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_output_high 0
#define DT_N_S_pin_controller_S_uart1_default_S_group2_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/uart2_default
 *
 * Node identifier: DT_N_S_pin_controller_S_uart2_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart2_default_PATH "/pin-controller/uart2_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart2_default_FULL_NAME "uart2_default"

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_uart2_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart2_default_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart2_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_uart2_default_S_group1) fn(DT_N_S_pin_controller_S_uart2_default_S_group2)
#define DT_N_S_pin_controller_S_uart2_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart2_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart2_default_S_group2)
#define DT_N_S_pin_controller_S_uart2_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart2_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart2_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart2_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart2_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart2_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart2_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_uart2_default_S_group1) fn(DT_N_S_pin_controller_S_uart2_default_S_group2)
#define DT_N_S_pin_controller_S_uart2_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart2_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart2_default_S_group2)
#define DT_N_S_pin_controller_S_uart2_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart2_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart2_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart2_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart2_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart2_default_S_group2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart2_default_ORD 37
#define DT_N_S_pin_controller_S_uart2_default_ORD_STR_SORTABLE 00037

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart2_default_REQUIRES_ORDS \
	22, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart2_default_SUPPORTS_ORDS \
	38, /* /pin-controller/uart2_default/group1 */ \
	39, /* /pin-controller/uart2_default/group2 */ \
	67, /* /soc/uart@3ff6e000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart2_default_EXISTS 1
#define DT_N_NODELABEL_uart2_default DT_N_S_pin_controller_S_uart2_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart2_default_REG_NUM 0
#define DT_N_S_pin_controller_S_uart2_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart2_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart2_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart2_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart2_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /pin-controller/uart2_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_uart2_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart2_default_S_group1_PATH "/pin-controller/uart2_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart2_default_S_group1_FULL_NAME "group1"

/* Node parent (/pin-controller/uart2_default) identifier: */
#define DT_N_S_pin_controller_S_uart2_default_S_group1_PARENT DT_N_S_pin_controller_S_uart2_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart2_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart2_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_uart2_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart2_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart2_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_uart2_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_uart2_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart2_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart2_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart2_default_S_group1_ORD 38
#define DT_N_S_pin_controller_S_uart2_default_S_group1_ORD_STR_SORTABLE 00038

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart2_default_S_group1_REQUIRES_ORDS \
	37, /* /pin-controller/uart2_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart2_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart2_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart2_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_uart2_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart2_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart2_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart2_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart2_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_pinmux {6520785 /* 0x637fd1 */}
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_pinmux_IDX_0 6520785
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_uart2_default_S_group1, pinmux, 0)
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart2_default_S_group1, pinmux, 0)
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart2_default_S_group1, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart2_default_S_group1, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_pinmux_LEN 1
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_bias_disable 0
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_input_enable 0
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_output_enable 0
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_output_low 0
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_output_high 0
#define DT_N_S_pin_controller_S_uart2_default_S_group1_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/uart2_default/group2
 *
 * Node identifier: DT_N_S_pin_controller_S_uart2_default_S_group2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart2_default_S_group2_PATH "/pin-controller/uart2_default/group2"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart2_default_S_group2_FULL_NAME "group2"

/* Node parent (/pin-controller/uart2_default) identifier: */
#define DT_N_S_pin_controller_S_uart2_default_S_group2_PARENT DT_N_S_pin_controller_S_uart2_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart2_default_S_group2_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart2_default_S_group2_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_uart2_default_S_group2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart2_default_S_group2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart2_default_S_group2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_uart2_default_S_group2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_uart2_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart2_default_S_group2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart2_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart2_default_S_group2_ORD 39
#define DT_N_S_pin_controller_S_uart2_default_S_group2_ORD_STR_SORTABLE 00039

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart2_default_S_group2_REQUIRES_ORDS \
	37, /* /pin-controller/uart2_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart2_default_S_group2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart2_default_S_group2_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart2_default_S_group2_REG_NUM 0
#define DT_N_S_pin_controller_S_uart2_default_S_group2_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart2_default_S_group2_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart2_default_S_group2_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart2_default_S_group2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart2_default_S_group2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_pinmux {16757136 /* 0xffb190 */}
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_pinmux_IDX_0 16757136
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_uart2_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart2_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart2_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart2_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_pinmux_LEN 1
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_bias_disable 0
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_bias_pull_up 1
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_input_enable 0
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_output_enable 0
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_output_low 0
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_output_high 0
#define DT_N_S_pin_controller_S_uart2_default_S_group2_P_output_high_EXISTS 1

/*
 * Devicetree node: /soc/adc@3ff48800
 *
 * Node identifier: DT_N_S_soc_S_adc_3ff48800
 *
 * Binding (compatible = espressif,esp32-adc):
 *   $ZEPHYR_BASE/dts/bindings/adc/espressif,esp32-adc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_adc_3ff48800_PATH "/soc/adc@3ff48800"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_adc_3ff48800_FULL_NAME "adc@3ff48800"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_adc_3ff48800_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_adc_3ff48800_CHILD_IDX 32

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_adc_3ff48800_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_adc_3ff48800_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_3ff48800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_3ff48800_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_adc_3ff48800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_adc_3ff48800_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_3ff48800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_3ff48800_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_adc_3ff48800_ORD 40
#define DT_N_S_soc_S_adc_3ff48800_ORD_STR_SORTABLE 00040

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_adc_3ff48800_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_adc_3ff48800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_adc_3ff48800_EXISTS 1
#define DT_N_INST_0_espressif_esp32_adc DT_N_S_soc_S_adc_3ff48800
#define DT_N_NODELABEL_adc0             DT_N_S_soc_S_adc_3ff48800

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_adc_3ff48800_REG_NUM 1
#define DT_N_S_soc_S_adc_3ff48800_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48800_REG_IDX_0_VAL_ADDRESS 1072990208 /* 0x3ff48800 */
#define DT_N_S_soc_S_adc_3ff48800_REG_IDX_0_VAL_SIZE 10 /* 0xa */
#define DT_N_S_soc_S_adc_3ff48800_RANGES_NUM 0
#define DT_N_S_soc_S_adc_3ff48800_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_adc_3ff48800_IRQ_NUM 0
#define DT_N_S_soc_S_adc_3ff48800_COMPAT_MATCHES_espressif_esp32_adc 1
#define DT_N_S_soc_S_adc_3ff48800_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48800_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_adc_3ff48800_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48800_COMPAT_MODEL_IDX_0 "esp32-adc"
#define DT_N_S_soc_S_adc_3ff48800_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_adc_3ff48800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_adc_3ff48800_P_unit 1
#define DT_N_S_soc_S_adc_3ff48800_P_unit_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48800_P_channel_count 8
#define DT_N_S_soc_S_adc_3ff48800_P_channel_count_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48800_P_status "disabled"
#define DT_N_S_soc_S_adc_3ff48800_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_adc_3ff48800_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_adc_3ff48800_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_adc_3ff48800_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_adc_3ff48800_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48800_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_adc_3ff48800_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48800_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_adc_3ff48800_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_adc_3ff48800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_3ff48800, status, 0)
#define DT_N_S_soc_S_adc_3ff48800_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_3ff48800, status, 0)
#define DT_N_S_soc_S_adc_3ff48800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_3ff48800, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_3ff48800_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_3ff48800, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_3ff48800_P_status_LEN 1
#define DT_N_S_soc_S_adc_3ff48800_P_status_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48800_P_compatible {"espressif,esp32-adc"}
#define DT_N_S_soc_S_adc_3ff48800_P_compatible_IDX_0 "espressif,esp32-adc"
#define DT_N_S_soc_S_adc_3ff48800_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-adc
#define DT_N_S_soc_S_adc_3ff48800_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_adc
#define DT_N_S_soc_S_adc_3ff48800_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_ADC
#define DT_N_S_soc_S_adc_3ff48800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_3ff48800, compatible, 0)
#define DT_N_S_soc_S_adc_3ff48800_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_3ff48800, compatible, 0)
#define DT_N_S_soc_S_adc_3ff48800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_3ff48800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_3ff48800_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_3ff48800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_3ff48800_P_compatible_LEN 1
#define DT_N_S_soc_S_adc_3ff48800_P_compatible_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48800_P_reg {1072990208 /* 0x3ff48800 */, 10 /* 0xa */}
#define DT_N_S_soc_S_adc_3ff48800_P_reg_IDX_0 1072990208
#define DT_N_S_soc_S_adc_3ff48800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48800_P_reg_IDX_1 10
#define DT_N_S_soc_S_adc_3ff48800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48800_P_reg_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48800_P_wakeup_source 0
#define DT_N_S_soc_S_adc_3ff48800_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48800_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_adc_3ff48800_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/adc@3ff48890
 *
 * Node identifier: DT_N_S_soc_S_adc_3ff48890
 *
 * Binding (compatible = espressif,esp32-adc):
 *   $ZEPHYR_BASE/dts/bindings/adc/espressif,esp32-adc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_adc_3ff48890_PATH "/soc/adc@3ff48890"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_adc_3ff48890_FULL_NAME "adc@3ff48890"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_adc_3ff48890_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_adc_3ff48890_CHILD_IDX 33

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_adc_3ff48890_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_adc_3ff48890_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_3ff48890_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_3ff48890_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_adc_3ff48890_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_adc_3ff48890_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_3ff48890_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_3ff48890_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_adc_3ff48890_ORD 41
#define DT_N_S_soc_S_adc_3ff48890_ORD_STR_SORTABLE 00041

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_adc_3ff48890_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_adc_3ff48890_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_adc_3ff48890_EXISTS 1
#define DT_N_INST_1_espressif_esp32_adc DT_N_S_soc_S_adc_3ff48890
#define DT_N_NODELABEL_adc1             DT_N_S_soc_S_adc_3ff48890

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_adc_3ff48890_REG_NUM 1
#define DT_N_S_soc_S_adc_3ff48890_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48890_REG_IDX_0_VAL_ADDRESS 1072990352 /* 0x3ff48890 */
#define DT_N_S_soc_S_adc_3ff48890_REG_IDX_0_VAL_SIZE 10 /* 0xa */
#define DT_N_S_soc_S_adc_3ff48890_RANGES_NUM 0
#define DT_N_S_soc_S_adc_3ff48890_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_adc_3ff48890_IRQ_NUM 0
#define DT_N_S_soc_S_adc_3ff48890_COMPAT_MATCHES_espressif_esp32_adc 1
#define DT_N_S_soc_S_adc_3ff48890_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48890_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_adc_3ff48890_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48890_COMPAT_MODEL_IDX_0 "esp32-adc"
#define DT_N_S_soc_S_adc_3ff48890_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_adc_3ff48890_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_adc_3ff48890_P_unit 2
#define DT_N_S_soc_S_adc_3ff48890_P_unit_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48890_P_channel_count 10
#define DT_N_S_soc_S_adc_3ff48890_P_channel_count_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48890_P_status "disabled"
#define DT_N_S_soc_S_adc_3ff48890_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_adc_3ff48890_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_adc_3ff48890_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_adc_3ff48890_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_adc_3ff48890_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48890_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_adc_3ff48890_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48890_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_adc_3ff48890_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_adc_3ff48890_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_3ff48890, status, 0)
#define DT_N_S_soc_S_adc_3ff48890_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_3ff48890, status, 0)
#define DT_N_S_soc_S_adc_3ff48890_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_3ff48890, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_3ff48890_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_3ff48890, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_3ff48890_P_status_LEN 1
#define DT_N_S_soc_S_adc_3ff48890_P_status_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48890_P_compatible {"espressif,esp32-adc"}
#define DT_N_S_soc_S_adc_3ff48890_P_compatible_IDX_0 "espressif,esp32-adc"
#define DT_N_S_soc_S_adc_3ff48890_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-adc
#define DT_N_S_soc_S_adc_3ff48890_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_adc
#define DT_N_S_soc_S_adc_3ff48890_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_ADC
#define DT_N_S_soc_S_adc_3ff48890_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48890_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_3ff48890, compatible, 0)
#define DT_N_S_soc_S_adc_3ff48890_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_3ff48890, compatible, 0)
#define DT_N_S_soc_S_adc_3ff48890_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_3ff48890, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_3ff48890_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_3ff48890, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_3ff48890_P_compatible_LEN 1
#define DT_N_S_soc_S_adc_3ff48890_P_compatible_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48890_P_reg {1072990352 /* 0x3ff48890 */, 10 /* 0xa */}
#define DT_N_S_soc_S_adc_3ff48890_P_reg_IDX_0 1072990352
#define DT_N_S_soc_S_adc_3ff48890_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48890_P_reg_IDX_1 10
#define DT_N_S_soc_S_adc_3ff48890_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48890_P_reg_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48890_P_wakeup_source 0
#define DT_N_S_soc_S_adc_3ff48890_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_adc_3ff48890_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_adc_3ff48890_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/can@3ff6b000
 *
 * Node identifier: DT_N_S_soc_S_can_3ff6b000
 *
 * Binding (compatible = espressif,esp32-twai):
 *   $ZEPHYR_BASE/dts/bindings/can/espressif,esp32-twai.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_can_3ff6b000_PATH "/soc/can@3ff6b000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_can_3ff6b000_FULL_NAME "can@3ff6b000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_can_3ff6b000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_can_3ff6b000_CHILD_IDX 26

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_can_3ff6b000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_can_3ff6b000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_can_3ff6b000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_can_3ff6b000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_can_3ff6b000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_can_3ff6b000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_can_3ff6b000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_can_3ff6b000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_can_3ff6b000_ORD 42
#define DT_N_S_soc_S_can_3ff6b000_ORD_STR_SORTABLE 00042

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_can_3ff6b000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_can_3ff6b000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_can_3ff6b000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_twai DT_N_S_soc_S_can_3ff6b000
#define DT_N_NODELABEL_twai              DT_N_S_soc_S_can_3ff6b000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_can_3ff6b000_REG_NUM 1
#define DT_N_S_soc_S_can_3ff6b000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_REG_IDX_0_VAL_ADDRESS 1073131520 /* 0x3ff6b000 */
#define DT_N_S_soc_S_can_3ff6b000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_can_3ff6b000_RANGES_NUM 0
#define DT_N_S_soc_S_can_3ff6b000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_can_3ff6b000_IRQ_NUM 1
#define DT_N_S_soc_S_can_3ff6b000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_IRQ_IDX_0_VAL_irq 45
#define DT_N_S_soc_S_can_3ff6b000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_can_3ff6b000_COMPAT_MATCHES_espressif_esp32_twai 1
#define DT_N_S_soc_S_can_3ff6b000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_can_3ff6b000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_COMPAT_MODEL_IDX_0 "esp32-twai"
#define DT_N_S_soc_S_can_3ff6b000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_can_3ff6b000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_can_3ff6b000_P_reg {1073131520 /* 0x3ff6b000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_can_3ff6b000_P_reg_IDX_0 1073131520
#define DT_N_S_soc_S_can_3ff6b000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_can_3ff6b000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_reg_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_interrupts {45 /* 0x2d */}
#define DT_N_S_soc_S_can_3ff6b000_P_interrupts_IDX_0 45
#define DT_N_S_soc_S_can_3ff6b000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_can_3ff6b000_P_clocks_IDX_0_VAL_offset 22
#define DT_N_S_soc_S_can_3ff6b000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_3ff6b000, clocks, 0)
#define DT_N_S_soc_S_can_3ff6b000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_3ff6b000, clocks, 0)
#define DT_N_S_soc_S_can_3ff6b000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_3ff6b000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_3ff6b000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_3ff6b000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_3ff6b000_P_clocks_LEN 1
#define DT_N_S_soc_S_can_3ff6b000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_sample_point 875
#define DT_N_S_soc_S_can_3ff6b000_P_sample_point_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_sjw 1
#define DT_N_S_soc_S_can_3ff6b000_P_sjw_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_status "disabled"
#define DT_N_S_soc_S_can_3ff6b000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_can_3ff6b000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_can_3ff6b000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_can_3ff6b000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_can_3ff6b000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_can_3ff6b000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_can_3ff6b000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_can_3ff6b000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_3ff6b000, status, 0)
#define DT_N_S_soc_S_can_3ff6b000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_3ff6b000, status, 0)
#define DT_N_S_soc_S_can_3ff6b000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_3ff6b000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_3ff6b000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_3ff6b000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_3ff6b000_P_status_LEN 1
#define DT_N_S_soc_S_can_3ff6b000_P_status_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_compatible {"espressif,esp32-twai"}
#define DT_N_S_soc_S_can_3ff6b000_P_compatible_IDX_0 "espressif,esp32-twai"
#define DT_N_S_soc_S_can_3ff6b000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-twai
#define DT_N_S_soc_S_can_3ff6b000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_twai
#define DT_N_S_soc_S_can_3ff6b000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TWAI
#define DT_N_S_soc_S_can_3ff6b000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_3ff6b000, compatible, 0)
#define DT_N_S_soc_S_can_3ff6b000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_3ff6b000, compatible, 0)
#define DT_N_S_soc_S_can_3ff6b000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_3ff6b000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_3ff6b000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_3ff6b000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_3ff6b000_P_compatible_LEN 1
#define DT_N_S_soc_S_can_3ff6b000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_can_3ff6b000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_can_3ff6b000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_can_3ff6b000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_3ff6b000, interrupt_parent, 0)
#define DT_N_S_soc_S_can_3ff6b000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_3ff6b000, interrupt_parent, 0)
#define DT_N_S_soc_S_can_3ff6b000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_3ff6b000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_3ff6b000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_3ff6b000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_3ff6b000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_can_3ff6b000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_wakeup_source 0
#define DT_N_S_soc_S_can_3ff6b000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_can_3ff6b000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_can_3ff6b000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/counter@3ff5f000
 *
 * Node identifier: DT_N_S_soc_S_counter_3ff5f000
 *
 * Binding (compatible = espressif,esp32-timer):
 *   $ZEPHYR_BASE/dts/bindings/counter/espressif,esp32-timer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_3ff5f000_PATH "/soc/counter@3ff5f000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_3ff5f000_FULL_NAME "counter@3ff5f000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_3ff5f000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_counter_3ff5f000_CHILD_IDX 27

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_3ff5f000_ORD 43
#define DT_N_S_soc_S_counter_3ff5f000_ORD_STR_SORTABLE 00043

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_3ff5f000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_3ff5f000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_3ff5f000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_timer DT_N_S_soc_S_counter_3ff5f000
#define DT_N_NODELABEL_timer0             DT_N_S_soc_S_counter_3ff5f000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_counter_3ff5f000_REG_NUM 1
#define DT_N_S_soc_S_counter_3ff5f000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_REG_IDX_0_VAL_ADDRESS 1073082368 /* 0x3ff5f000 */
#define DT_N_S_soc_S_counter_3ff5f000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_3ff5f000_RANGES_NUM 0
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_counter_3ff5f000_IRQ_NUM 1
#define DT_N_S_soc_S_counter_3ff5f000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_counter_3ff5f000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff5f000_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_3ff5f000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_counter_3ff5f000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_COMPAT_MODEL_IDX_0 "esp32-timer"
#define DT_N_S_soc_S_counter_3ff5f000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_counter_3ff5f000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_counter_3ff5f000_P_group 0
#define DT_N_S_soc_S_counter_3ff5f000_P_group_ENUM_IDX 0
#define DT_N_S_soc_S_counter_3ff5f000_P_group_ENUM_VAL_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_group_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_index 0
#define DT_N_S_soc_S_counter_3ff5f000_P_index_ENUM_IDX 0
#define DT_N_S_soc_S_counter_3ff5f000_P_index_ENUM_VAL_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_index_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_prescaler 2
#define DT_N_S_soc_S_counter_3ff5f000_P_prescaler_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_status "disabled"
#define DT_N_S_soc_S_counter_3ff5f000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_counter_3ff5f000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_counter_3ff5f000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_counter_3ff5f000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_counter_3ff5f000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_counter_3ff5f000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_counter_3ff5f000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_counter_3ff5f000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f000, status, 0)
#define DT_N_S_soc_S_counter_3ff5f000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_3ff5f000, status, 0)
#define DT_N_S_soc_S_counter_3ff5f000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_3ff5f000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f000_P_status_LEN 1
#define DT_N_S_soc_S_counter_3ff5f000_P_status_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-timer
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_timer
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TIMER
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f000, compatible, 0)
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_3ff5f000, compatible, 0)
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_3ff5f000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_reg {1073082368 /* 0x3ff5f000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_IDX_0 1073082368
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupts {14 /* 0xe */}
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f000, interrupt_parent, 0)
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_3ff5f000, interrupt_parent, 0)
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_3ff5f000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_wakeup_source 0
#define DT_N_S_soc_S_counter_3ff5f000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_counter_3ff5f000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/counter@3ff5f024
 *
 * Node identifier: DT_N_S_soc_S_counter_3ff5f024
 *
 * Binding (compatible = espressif,esp32-timer):
 *   $ZEPHYR_BASE/dts/bindings/counter/espressif,esp32-timer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_3ff5f024_PATH "/soc/counter@3ff5f024"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_3ff5f024_FULL_NAME "counter@3ff5f024"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_3ff5f024_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_counter_3ff5f024_CHILD_IDX 28

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_3ff5f024_ORD 44
#define DT_N_S_soc_S_counter_3ff5f024_ORD_STR_SORTABLE 00044

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_3ff5f024_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_3ff5f024_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_3ff5f024_EXISTS 1
#define DT_N_INST_1_espressif_esp32_timer DT_N_S_soc_S_counter_3ff5f024
#define DT_N_NODELABEL_timer1             DT_N_S_soc_S_counter_3ff5f024

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_counter_3ff5f024_REG_NUM 1
#define DT_N_S_soc_S_counter_3ff5f024_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_REG_IDX_0_VAL_ADDRESS 1073082404 /* 0x3ff5f024 */
#define DT_N_S_soc_S_counter_3ff5f024_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_3ff5f024_RANGES_NUM 0
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_counter_3ff5f024_IRQ_NUM 1
#define DT_N_S_soc_S_counter_3ff5f024_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_IRQ_IDX_0_VAL_irq 15
#define DT_N_S_soc_S_counter_3ff5f024_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff5f024_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_3ff5f024_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_counter_3ff5f024_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_COMPAT_MODEL_IDX_0 "esp32-timer"
#define DT_N_S_soc_S_counter_3ff5f024_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_counter_3ff5f024_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_counter_3ff5f024_P_group 0
#define DT_N_S_soc_S_counter_3ff5f024_P_group_ENUM_IDX 0
#define DT_N_S_soc_S_counter_3ff5f024_P_group_ENUM_VAL_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_group_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_index 1
#define DT_N_S_soc_S_counter_3ff5f024_P_index_ENUM_IDX 1
#define DT_N_S_soc_S_counter_3ff5f024_P_index_ENUM_VAL_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_index_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_prescaler 2
#define DT_N_S_soc_S_counter_3ff5f024_P_prescaler_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_status "disabled"
#define DT_N_S_soc_S_counter_3ff5f024_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_counter_3ff5f024_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_counter_3ff5f024_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_counter_3ff5f024_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_counter_3ff5f024_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_counter_3ff5f024_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_counter_3ff5f024_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_counter_3ff5f024_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f024, status, 0)
#define DT_N_S_soc_S_counter_3ff5f024_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_3ff5f024, status, 0)
#define DT_N_S_soc_S_counter_3ff5f024_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f024, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f024_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_3ff5f024, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f024_P_status_LEN 1
#define DT_N_S_soc_S_counter_3ff5f024_P_status_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-timer
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_timer
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TIMER
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f024, compatible, 0)
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_3ff5f024, compatible, 0)
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f024, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_3ff5f024, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_reg {1073082404 /* 0x3ff5f024 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_IDX_0 1073082404
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupts {15 /* 0xf */}
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupts_IDX_0 15
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f024, interrupt_parent, 0)
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_3ff5f024, interrupt_parent, 0)
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f024, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_3ff5f024, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_wakeup_source 0
#define DT_N_S_soc_S_counter_3ff5f024_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_counter_3ff5f024_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/counter@3ff60000
 *
 * Node identifier: DT_N_S_soc_S_counter_3ff60000
 *
 * Binding (compatible = espressif,esp32-timer):
 *   $ZEPHYR_BASE/dts/bindings/counter/espressif,esp32-timer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_3ff60000_PATH "/soc/counter@3ff60000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_3ff60000_FULL_NAME "counter@3ff60000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_3ff60000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_counter_3ff60000_CHILD_IDX 29

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_3ff60000_ORD 45
#define DT_N_S_soc_S_counter_3ff60000_ORD_STR_SORTABLE 00045

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_3ff60000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_3ff60000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_3ff60000_EXISTS 1
#define DT_N_INST_2_espressif_esp32_timer DT_N_S_soc_S_counter_3ff60000
#define DT_N_NODELABEL_timer2             DT_N_S_soc_S_counter_3ff60000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_counter_3ff60000_REG_NUM 1
#define DT_N_S_soc_S_counter_3ff60000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_REG_IDX_0_VAL_ADDRESS 1073086464 /* 0x3ff60000 */
#define DT_N_S_soc_S_counter_3ff60000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_3ff60000_RANGES_NUM 0
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_counter_3ff60000_IRQ_NUM 1
#define DT_N_S_soc_S_counter_3ff60000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_IRQ_IDX_0_VAL_irq 18
#define DT_N_S_soc_S_counter_3ff60000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff60000_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_3ff60000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_counter_3ff60000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_COMPAT_MODEL_IDX_0 "esp32-timer"
#define DT_N_S_soc_S_counter_3ff60000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_counter_3ff60000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_counter_3ff60000_P_group 1
#define DT_N_S_soc_S_counter_3ff60000_P_group_ENUM_IDX 1
#define DT_N_S_soc_S_counter_3ff60000_P_group_ENUM_VAL_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_group_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_index 0
#define DT_N_S_soc_S_counter_3ff60000_P_index_ENUM_IDX 0
#define DT_N_S_soc_S_counter_3ff60000_P_index_ENUM_VAL_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_index_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_prescaler 2
#define DT_N_S_soc_S_counter_3ff60000_P_prescaler_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_status "disabled"
#define DT_N_S_soc_S_counter_3ff60000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_counter_3ff60000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_counter_3ff60000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_counter_3ff60000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_counter_3ff60000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_counter_3ff60000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_counter_3ff60000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_counter_3ff60000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60000, status, 0)
#define DT_N_S_soc_S_counter_3ff60000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_3ff60000, status, 0)
#define DT_N_S_soc_S_counter_3ff60000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_3ff60000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60000_P_status_LEN 1
#define DT_N_S_soc_S_counter_3ff60000_P_status_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-timer
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_timer
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TIMER
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60000, compatible, 0)
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_3ff60000, compatible, 0)
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_3ff60000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_reg {1073086464 /* 0x3ff60000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_3ff60000_P_reg_IDX_0 1073086464
#define DT_N_S_soc_S_counter_3ff60000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_3ff60000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_interrupts {18 /* 0x12 */}
#define DT_N_S_soc_S_counter_3ff60000_P_interrupts_IDX_0 18
#define DT_N_S_soc_S_counter_3ff60000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff60000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff60000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff60000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60000, interrupt_parent, 0)
#define DT_N_S_soc_S_counter_3ff60000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_3ff60000, interrupt_parent, 0)
#define DT_N_S_soc_S_counter_3ff60000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_3ff60000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_counter_3ff60000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_wakeup_source 0
#define DT_N_S_soc_S_counter_3ff60000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_counter_3ff60000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/counter@3ff60024
 *
 * Node identifier: DT_N_S_soc_S_counter_3ff60024
 *
 * Binding (compatible = espressif,esp32-timer):
 *   $ZEPHYR_BASE/dts/bindings/counter/espressif,esp32-timer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_3ff60024_PATH "/soc/counter@3ff60024"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_3ff60024_FULL_NAME "counter@3ff60024"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_3ff60024_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_counter_3ff60024_CHILD_IDX 30

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_3ff60024_ORD 46
#define DT_N_S_soc_S_counter_3ff60024_ORD_STR_SORTABLE 00046

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_3ff60024_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_3ff60024_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_3ff60024_EXISTS 1
#define DT_N_INST_3_espressif_esp32_timer DT_N_S_soc_S_counter_3ff60024
#define DT_N_NODELABEL_timer3             DT_N_S_soc_S_counter_3ff60024

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_counter_3ff60024_REG_NUM 1
#define DT_N_S_soc_S_counter_3ff60024_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_REG_IDX_0_VAL_ADDRESS 1073086500 /* 0x3ff60024 */
#define DT_N_S_soc_S_counter_3ff60024_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_3ff60024_RANGES_NUM 0
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_counter_3ff60024_IRQ_NUM 1
#define DT_N_S_soc_S_counter_3ff60024_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_IRQ_IDX_0_VAL_irq 19
#define DT_N_S_soc_S_counter_3ff60024_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff60024_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_3ff60024_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_counter_3ff60024_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_COMPAT_MODEL_IDX_0 "esp32-timer"
#define DT_N_S_soc_S_counter_3ff60024_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_counter_3ff60024_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_counter_3ff60024_P_group 1
#define DT_N_S_soc_S_counter_3ff60024_P_group_ENUM_IDX 1
#define DT_N_S_soc_S_counter_3ff60024_P_group_ENUM_VAL_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_group_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_index 1
#define DT_N_S_soc_S_counter_3ff60024_P_index_ENUM_IDX 1
#define DT_N_S_soc_S_counter_3ff60024_P_index_ENUM_VAL_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_index_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_prescaler 2
#define DT_N_S_soc_S_counter_3ff60024_P_prescaler_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_status "disabled"
#define DT_N_S_soc_S_counter_3ff60024_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_counter_3ff60024_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_counter_3ff60024_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_counter_3ff60024_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_counter_3ff60024_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_counter_3ff60024_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_counter_3ff60024_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_counter_3ff60024_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60024, status, 0)
#define DT_N_S_soc_S_counter_3ff60024_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_3ff60024, status, 0)
#define DT_N_S_soc_S_counter_3ff60024_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60024, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60024_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_3ff60024, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60024_P_status_LEN 1
#define DT_N_S_soc_S_counter_3ff60024_P_status_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-timer
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_timer
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TIMER
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60024, compatible, 0)
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_3ff60024, compatible, 0)
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60024, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_3ff60024, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_reg {1073086500 /* 0x3ff60024 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_3ff60024_P_reg_IDX_0 1073086500
#define DT_N_S_soc_S_counter_3ff60024_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_3ff60024_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_interrupts {19 /* 0x13 */}
#define DT_N_S_soc_S_counter_3ff60024_P_interrupts_IDX_0 19
#define DT_N_S_soc_S_counter_3ff60024_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff60024_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff60024_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_counter_3ff60024_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60024, interrupt_parent, 0)
#define DT_N_S_soc_S_counter_3ff60024_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_3ff60024, interrupt_parent, 0)
#define DT_N_S_soc_S_counter_3ff60024_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60024, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60024_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_3ff60024, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60024_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_counter_3ff60024_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_wakeup_source 0
#define DT_N_S_soc_S_counter_3ff60024_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_counter_3ff60024_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/dac@3ff48800
 *
 * Node identifier: DT_N_S_soc_S_dac_3ff48800
 *
 * Binding (compatible = espressif,esp32-dac):
 *   $ZEPHYR_BASE/dts/bindings/dac/espressif,esp32-dac.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_dac_3ff48800_PATH "/soc/dac@3ff48800"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_dac_3ff48800_FULL_NAME "dac@3ff48800"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_dac_3ff48800_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_dac_3ff48800_CHILD_IDX 31

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_dac_3ff48800_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_dac_3ff48800_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_dac_3ff48800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_dac_3ff48800_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_dac_3ff48800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_dac_3ff48800_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_dac_3ff48800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_dac_3ff48800_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_dac_3ff48800_ORD 47
#define DT_N_S_soc_S_dac_3ff48800_ORD_STR_SORTABLE 00047

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_dac_3ff48800_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_dac_3ff48800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_dac_3ff48800_EXISTS 1
#define DT_N_INST_0_espressif_esp32_dac DT_N_S_soc_S_dac_3ff48800
#define DT_N_NODELABEL_dac              DT_N_S_soc_S_dac_3ff48800

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_dac_3ff48800_REG_NUM 1
#define DT_N_S_soc_S_dac_3ff48800_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_REG_IDX_0_VAL_ADDRESS 1072990208 /* 0x3ff48800 */
#define DT_N_S_soc_S_dac_3ff48800_REG_IDX_0_VAL_SIZE 256 /* 0x100 */
#define DT_N_S_soc_S_dac_3ff48800_RANGES_NUM 0
#define DT_N_S_soc_S_dac_3ff48800_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_dac_3ff48800_IRQ_NUM 1
#define DT_N_S_soc_S_dac_3ff48800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_IRQ_IDX_0_VAL_irq 46
#define DT_N_S_soc_S_dac_3ff48800_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_dac_3ff48800_COMPAT_MATCHES_espressif_esp32_dac 1
#define DT_N_S_soc_S_dac_3ff48800_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_dac_3ff48800_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_COMPAT_MODEL_IDX_0 "esp32-dac"
#define DT_N_S_soc_S_dac_3ff48800_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_dac_3ff48800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_dac_3ff48800_P_status "disabled"
#define DT_N_S_soc_S_dac_3ff48800_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_dac_3ff48800_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_dac_3ff48800_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_dac_3ff48800_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_dac_3ff48800_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_dac_3ff48800_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_dac_3ff48800_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_dac_3ff48800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dac_3ff48800, status, 0)
#define DT_N_S_soc_S_dac_3ff48800_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dac_3ff48800, status, 0)
#define DT_N_S_soc_S_dac_3ff48800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dac_3ff48800, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dac_3ff48800_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dac_3ff48800, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dac_3ff48800_P_status_LEN 1
#define DT_N_S_soc_S_dac_3ff48800_P_status_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_compatible {"espressif,esp32-dac"}
#define DT_N_S_soc_S_dac_3ff48800_P_compatible_IDX_0 "espressif,esp32-dac"
#define DT_N_S_soc_S_dac_3ff48800_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-dac
#define DT_N_S_soc_S_dac_3ff48800_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_dac
#define DT_N_S_soc_S_dac_3ff48800_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_DAC
#define DT_N_S_soc_S_dac_3ff48800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dac_3ff48800, compatible, 0)
#define DT_N_S_soc_S_dac_3ff48800_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dac_3ff48800, compatible, 0)
#define DT_N_S_soc_S_dac_3ff48800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dac_3ff48800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dac_3ff48800_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dac_3ff48800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dac_3ff48800_P_compatible_LEN 1
#define DT_N_S_soc_S_dac_3ff48800_P_compatible_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_reg {1072990208 /* 0x3ff48800 */, 256 /* 0x100 */}
#define DT_N_S_soc_S_dac_3ff48800_P_reg_IDX_0 1072990208
#define DT_N_S_soc_S_dac_3ff48800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_reg_IDX_1 256
#define DT_N_S_soc_S_dac_3ff48800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_reg_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_interrupts {46 /* 0x2e */}
#define DT_N_S_soc_S_dac_3ff48800_P_interrupts_IDX_0 46
#define DT_N_S_soc_S_dac_3ff48800_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_dac_3ff48800_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_dac_3ff48800_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_dac_3ff48800_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dac_3ff48800, interrupt_parent, 0)
#define DT_N_S_soc_S_dac_3ff48800_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dac_3ff48800, interrupt_parent, 0)
#define DT_N_S_soc_S_dac_3ff48800_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dac_3ff48800, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dac_3ff48800_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dac_3ff48800, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dac_3ff48800_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_dac_3ff48800_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_dac_3ff48800_P_clocks_IDX_0_VAL_offset 33
#define DT_N_S_soc_S_dac_3ff48800_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dac_3ff48800, clocks, 0)
#define DT_N_S_soc_S_dac_3ff48800_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dac_3ff48800, clocks, 0)
#define DT_N_S_soc_S_dac_3ff48800_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dac_3ff48800, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dac_3ff48800_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dac_3ff48800, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dac_3ff48800_P_clocks_LEN 1
#define DT_N_S_soc_S_dac_3ff48800_P_clocks_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_wakeup_source 0
#define DT_N_S_soc_S_dac_3ff48800_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_dac_3ff48800_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_dac_3ff48800_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/i2c@3ff53000
 *
 * Node identifier: DT_N_S_soc_S_i2c_3ff53000
 *
 * Binding (compatible = espressif,esp32-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/espressif,esp32-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_3ff53000_PATH "/soc/i2c@3ff53000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_3ff53000_FULL_NAME "i2c@3ff53000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_3ff53000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_i2c_3ff53000_CHILD_IDX 19

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_3ff53000_ORD 48
#define DT_N_S_soc_S_i2c_3ff53000_ORD_STR_SORTABLE 00048

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_3ff53000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */ \
	10, /* /soc/gpio/gpio@3ff44000 */ \
	23, /* /pin-controller/i2c0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_3ff53000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_3ff53000_EXISTS 1
#define DT_N_ALIAS_i2c_0                DT_N_S_soc_S_i2c_3ff53000
#define DT_N_INST_0_espressif_esp32_i2c DT_N_S_soc_S_i2c_3ff53000
#define DT_N_NODELABEL_i2c0             DT_N_S_soc_S_i2c_3ff53000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_3ff53000_REG_NUM 1
#define DT_N_S_soc_S_i2c_3ff53000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_REG_IDX_0_VAL_ADDRESS 1073033216 /* 0x3ff53000 */
#define DT_N_S_soc_S_i2c_3ff53000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_i2c_3ff53000_RANGES_NUM 0
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2c_3ff53000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_3ff53000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_IRQ_IDX_0_VAL_irq 49
#define DT_N_S_soc_S_i2c_3ff53000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_i2c_3ff53000_COMPAT_MATCHES_espressif_esp32_i2c 1
#define DT_N_S_soc_S_i2c_3ff53000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_i2c_3ff53000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_COMPAT_MODEL_IDX_0 "esp32-i2c"
#define DT_N_S_soc_S_i2c_3ff53000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_3ff53000_PINCTRL_NUM 1
#define DT_N_S_soc_S_i2c_3ff53000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_i2c_3ff53000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_i2c_3ff53000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_i2c_3ff53000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_i2c0_default

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_3ff53000_P_reg {1073033216 /* 0x3ff53000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_IDX_0 1073033216
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_i2c0_default
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_i2c0_default
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, pinctrl_0, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_3ff53000, pinctrl_0, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_3ff53000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, pinctrl_names, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_3ff53000, pinctrl_names, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_3ff53000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_i2c_3ff53000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_gpios_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_gpios_IDX_0_PH DT_N_S_soc_S_gpio_S_gpio_3ff44000
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_gpios_IDX_0_VAL_pin 22
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_gpios_IDX_0_VAL_flags 6
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, scl_gpios, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_3ff53000, scl_gpios, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, scl_gpios, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_3ff53000, scl_gpios, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_gpios_LEN 1
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_gpios_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_gpios_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_gpios_IDX_0_PH DT_N_S_soc_S_gpio_S_gpio_3ff44000
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_gpios_IDX_0_VAL_pin 21
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_gpios_IDX_0_VAL_flags 6
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, sda_gpios, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_3ff53000, sda_gpios, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, sda_gpios, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_3ff53000, sda_gpios, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_gpios_LEN 1
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_gpios_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_tx_lsb 0
#define DT_N_S_soc_S_i2c_3ff53000_P_tx_lsb_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_rx_lsb 0
#define DT_N_S_soc_S_i2c_3ff53000_P_rx_lsb_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clock_frequency 100000
#define DT_N_S_soc_S_i2c_3ff53000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_status "okay"
#define DT_N_S_soc_S_i2c_3ff53000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_i2c_3ff53000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_i2c_3ff53000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_i2c_3ff53000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_i2c_3ff53000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_i2c_3ff53000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_i2c_3ff53000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_i2c_3ff53000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, status, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_3ff53000, status, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_3ff53000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_status_LEN 1
#define DT_N_S_soc_S_i2c_3ff53000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible {"espressif,esp32-i2c"}
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_IDX_0 "espressif,esp32-i2c"
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-i2c
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_i2c
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_I2C
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, compatible, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_3ff53000, compatible, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_3ff53000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupts {49 /* 0x31 */}
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupts_IDX_0 49
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, interrupt_parent, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_3ff53000, interrupt_parent, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_3ff53000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_IDX_0_VAL_offset 4
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, clocks, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_3ff53000, clocks, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_3ff53000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_3ff53000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_i2c_3ff53000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/i2c@3ff67000
 *
 * Node identifier: DT_N_S_soc_S_i2c_3ff67000
 *
 * Binding (compatible = espressif,esp32-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/espressif,esp32-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_3ff67000_PATH "/soc/i2c@3ff67000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_3ff67000_FULL_NAME "i2c@3ff67000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_3ff67000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_i2c_3ff67000_CHILD_IDX 20

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_3ff67000_ORD 49
#define DT_N_S_soc_S_i2c_3ff67000_ORD_STR_SORTABLE 00049

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_3ff67000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_3ff67000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_3ff67000_EXISTS 1
#define DT_N_INST_1_espressif_esp32_i2c DT_N_S_soc_S_i2c_3ff67000
#define DT_N_NODELABEL_i2c1             DT_N_S_soc_S_i2c_3ff67000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_3ff67000_REG_NUM 1
#define DT_N_S_soc_S_i2c_3ff67000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_REG_IDX_0_VAL_ADDRESS 1073115136 /* 0x3ff67000 */
#define DT_N_S_soc_S_i2c_3ff67000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_i2c_3ff67000_RANGES_NUM 0
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2c_3ff67000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_3ff67000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_IRQ_IDX_0_VAL_irq 50
#define DT_N_S_soc_S_i2c_3ff67000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_i2c_3ff67000_COMPAT_MATCHES_espressif_esp32_i2c 1
#define DT_N_S_soc_S_i2c_3ff67000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_i2c_3ff67000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_COMPAT_MODEL_IDX_0 "esp32-i2c"
#define DT_N_S_soc_S_i2c_3ff67000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_3ff67000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_3ff67000_P_reg {1073115136 /* 0x3ff67000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_IDX_0 1073115136
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_tx_lsb 0
#define DT_N_S_soc_S_i2c_3ff67000_P_tx_lsb_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_rx_lsb 0
#define DT_N_S_soc_S_i2c_3ff67000_P_rx_lsb_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_status "disabled"
#define DT_N_S_soc_S_i2c_3ff67000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_i2c_3ff67000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_i2c_3ff67000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_3ff67000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_i2c_3ff67000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_i2c_3ff67000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_i2c_3ff67000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_3ff67000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, status, 0)
#define DT_N_S_soc_S_i2c_3ff67000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_3ff67000, status, 0)
#define DT_N_S_soc_S_i2c_3ff67000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff67000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff67000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_3ff67000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff67000_P_status_LEN 1
#define DT_N_S_soc_S_i2c_3ff67000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible {"espressif,esp32-i2c"}
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_IDX_0 "espressif,esp32-i2c"
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-i2c
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_i2c
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_I2C
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, compatible, 0)
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_3ff67000, compatible, 0)
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff67000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_3ff67000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupts {50 /* 0x32 */}
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupts_IDX_0 50
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, interrupt_parent, 0)
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_3ff67000, interrupt_parent, 0)
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff67000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_3ff67000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_IDX_0_VAL_offset 5
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, clocks, 0)
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_3ff67000, clocks, 0)
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff67000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_3ff67000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_3ff67000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_i2c_3ff67000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/ipi@3f4c0058
 *
 * Node identifier: DT_N_S_soc_S_ipi_3f4c0058
 */

/* Node's full path: */
#define DT_N_S_soc_S_ipi_3f4c0058_PATH "/soc/ipi@3f4c0058"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ipi_3f4c0058_FULL_NAME "ipi@3f4c0058"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ipi_3f4c0058_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_ipi_3f4c0058_CHILD_IDX 8

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_ipi_3f4c0058_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ipi_3f4c0058_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_ipi_3f4c0058_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ipi_3f4c0058_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_ipi_3f4c0058_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ipi_3f4c0058_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_ipi_3f4c0058_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_ipi_3f4c0058_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ipi_3f4c0058_ORD 50
#define DT_N_S_soc_S_ipi_3f4c0058_ORD_STR_SORTABLE 00050

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ipi_3f4c0058_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ipi_3f4c0058_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ipi_3f4c0058_EXISTS 1
#define DT_N_INST_0_espressif_crosscore_interrupt DT_N_S_soc_S_ipi_3f4c0058
#define DT_N_NODELABEL_ipi0                       DT_N_S_soc_S_ipi_3f4c0058

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ipi_3f4c0058_REG_NUM 1
#define DT_N_S_soc_S_ipi_3f4c0058_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_REG_IDX_0_VAL_ADDRESS 1061945432 /* 0x3f4c0058 */
#define DT_N_S_soc_S_ipi_3f4c0058_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ipi_3f4c0058_RANGES_NUM 0
#define DT_N_S_soc_S_ipi_3f4c0058_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_ipi_3f4c0058_IRQ_NUM 1
#define DT_N_S_soc_S_ipi_3f4c0058_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_IRQ_IDX_0_VAL_irq 24
#define DT_N_S_soc_S_ipi_3f4c0058_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_ipi_3f4c0058_COMPAT_MATCHES_espressif_crosscore_interrupt 1
#define DT_N_S_soc_S_ipi_3f4c0058_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_ipi_3f4c0058_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_COMPAT_MODEL_IDX_0 "crosscore-interrupt"
#define DT_N_S_soc_S_ipi_3f4c0058_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ipi_3f4c0058_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible {"espressif,crosscore-interrupt"}
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_IDX_0 "espressif,crosscore-interrupt"
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_IDX_0_STRING_UNQUOTED espressif,crosscore-interrupt
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_IDX_0_STRING_TOKEN espressif_crosscore_interrupt
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_CROSSCORE_INTERRUPT
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ipi_3f4c0058, compatible, 0)
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ipi_3f4c0058, compatible, 0)
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ipi_3f4c0058, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ipi_3f4c0058, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_LEN 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_reg {1061945432 /* 0x3f4c0058 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_ipi_3f4c0058_P_reg_IDX_0 1061945432
#define DT_N_S_soc_S_ipi_3f4c0058_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_reg_IDX_1 4
#define DT_N_S_soc_S_ipi_3f4c0058_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_reg_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_interrupts {24 /* 0x18 */}
#define DT_N_S_soc_S_ipi_3f4c0058_P_interrupts_IDX_0 24
#define DT_N_S_soc_S_ipi_3f4c0058_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_interrupts_EXISTS 1

/*
 * Devicetree node: /soc/ipi@3f4c005c
 *
 * Node identifier: DT_N_S_soc_S_ipi_3f4c005c
 */

/* Node's full path: */
#define DT_N_S_soc_S_ipi_3f4c005c_PATH "/soc/ipi@3f4c005c"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ipi_3f4c005c_FULL_NAME "ipi@3f4c005c"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ipi_3f4c005c_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_ipi_3f4c005c_CHILD_IDX 9

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_ipi_3f4c005c_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ipi_3f4c005c_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_ipi_3f4c005c_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ipi_3f4c005c_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_ipi_3f4c005c_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ipi_3f4c005c_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_ipi_3f4c005c_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_ipi_3f4c005c_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ipi_3f4c005c_ORD 51
#define DT_N_S_soc_S_ipi_3f4c005c_ORD_STR_SORTABLE 00051

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ipi_3f4c005c_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ipi_3f4c005c_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ipi_3f4c005c_EXISTS 1
#define DT_N_INST_1_espressif_crosscore_interrupt DT_N_S_soc_S_ipi_3f4c005c
#define DT_N_NODELABEL_ipi1                       DT_N_S_soc_S_ipi_3f4c005c

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ipi_3f4c005c_REG_NUM 1
#define DT_N_S_soc_S_ipi_3f4c005c_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_REG_IDX_0_VAL_ADDRESS 1061945436 /* 0x3f4c005c */
#define DT_N_S_soc_S_ipi_3f4c005c_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ipi_3f4c005c_RANGES_NUM 0
#define DT_N_S_soc_S_ipi_3f4c005c_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_ipi_3f4c005c_IRQ_NUM 1
#define DT_N_S_soc_S_ipi_3f4c005c_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_IRQ_IDX_0_VAL_irq 25
#define DT_N_S_soc_S_ipi_3f4c005c_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_ipi_3f4c005c_COMPAT_MATCHES_espressif_crosscore_interrupt 1
#define DT_N_S_soc_S_ipi_3f4c005c_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_ipi_3f4c005c_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_COMPAT_MODEL_IDX_0 "crosscore-interrupt"
#define DT_N_S_soc_S_ipi_3f4c005c_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ipi_3f4c005c_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible {"espressif,crosscore-interrupt"}
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_IDX_0 "espressif,crosscore-interrupt"
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_IDX_0_STRING_UNQUOTED espressif,crosscore-interrupt
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_IDX_0_STRING_TOKEN espressif_crosscore_interrupt
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_CROSSCORE_INTERRUPT
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ipi_3f4c005c, compatible, 0)
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ipi_3f4c005c, compatible, 0)
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ipi_3f4c005c, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ipi_3f4c005c, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_LEN 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_reg {1061945436 /* 0x3f4c005c */, 4 /* 0x4 */}
#define DT_N_S_soc_S_ipi_3f4c005c_P_reg_IDX_0 1061945436
#define DT_N_S_soc_S_ipi_3f4c005c_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_reg_IDX_1 4
#define DT_N_S_soc_S_ipi_3f4c005c_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_reg_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_interrupts {25 /* 0x19 */}
#define DT_N_S_soc_S_ipi_3f4c005c_P_interrupts_IDX_0 25
#define DT_N_S_soc_S_ipi_3f4c005c_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_interrupts_EXISTS 1

/*
 * Devicetree node: /soc/memory@3ffe5230
 *
 * Node identifier: DT_N_S_soc_S_memory_3ffe5230
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_3ffe5230_PATH "/soc/memory@3ffe5230"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_3ffe5230_FULL_NAME "memory@3ffe5230"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_3ffe5230_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_memory_3ffe5230_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_memory_3ffe5230_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_3ffe5230_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_3ffe5230_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_3ffe5230_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_memory_3ffe5230_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_memory_3ffe5230_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_3ffe5230_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_3ffe5230_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_3ffe5230_ORD 52
#define DT_N_S_soc_S_memory_3ffe5230_ORD_STR_SORTABLE 00052

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_3ffe5230_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_3ffe5230_SUPPORTS_ORDS \
	53, /* /soc/ipm@3ffed238 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_3ffe5230_EXISTS 1
#define DT_N_INST_1_mmio_sram  DT_N_S_soc_S_memory_3ffe5230
#define DT_N_NODELABEL_ipmmem0 DT_N_S_soc_S_memory_3ffe5230

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_memory_3ffe5230_REG_NUM 1
#define DT_N_S_soc_S_memory_3ffe5230_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffe5230_REG_IDX_0_VAL_ADDRESS 1073631792 /* 0x3ffe5230 */
#define DT_N_S_soc_S_memory_3ffe5230_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_memory_3ffe5230_RANGES_NUM 0
#define DT_N_S_soc_S_memory_3ffe5230_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_memory_3ffe5230_IRQ_NUM 0
#define DT_N_S_soc_S_memory_3ffe5230_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_3ffe5230_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_memory_3ffe5230_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_memory_3ffe5230_P_reg {1073631792 /* 0x3ffe5230 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_memory_3ffe5230_P_reg_IDX_0 1073631792
#define DT_N_S_soc_S_memory_3ffe5230_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffe5230_P_reg_IDX_1 1024
#define DT_N_S_soc_S_memory_3ffe5230_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_3ffe5230_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_3ffe5230_P_compatible {"mmio-sram"}
#define DT_N_S_soc_S_memory_3ffe5230_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_soc_S_memory_3ffe5230_P_compatible_IDX_0_STRING_UNQUOTED mmio-sram
#define DT_N_S_soc_S_memory_3ffe5230_P_compatible_IDX_0_STRING_TOKEN mmio_sram
#define DT_N_S_soc_S_memory_3ffe5230_P_compatible_IDX_0_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_soc_S_memory_3ffe5230_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffe5230_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_3ffe5230, compatible, 0)
#define DT_N_S_soc_S_memory_3ffe5230_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_3ffe5230, compatible, 0)
#define DT_N_S_soc_S_memory_3ffe5230_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3ffe5230, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3ffe5230_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_3ffe5230, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3ffe5230_P_compatible_LEN 1
#define DT_N_S_soc_S_memory_3ffe5230_P_compatible_EXISTS 1
#define DT_N_S_soc_S_memory_3ffe5230_P_wakeup_source 0
#define DT_N_S_soc_S_memory_3ffe5230_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_memory_3ffe5230_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_memory_3ffe5230_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/ipm@3ffed238
 *
 * Node identifier: DT_N_S_soc_S_ipm_3ffed238
 *
 * Binding (compatible = espressif,esp32-ipm):
 *   $ZEPHYR_BASE/dts/bindings/ipm/espressif,esp32-ipm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_ipm_3ffed238_PATH "/soc/ipm@3ffed238"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ipm_3ffed238_FULL_NAME "ipm@3ffed238"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ipm_3ffed238_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_ipm_3ffed238_CHILD_IDX 7

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_ipm_3ffed238_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ipm_3ffed238_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_ipm_3ffed238_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ipm_3ffed238_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_ipm_3ffed238_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ipm_3ffed238_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_ipm_3ffed238_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_ipm_3ffed238_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ipm_3ffed238_ORD 53
#define DT_N_S_soc_S_ipm_3ffed238_ORD_STR_SORTABLE 00053

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ipm_3ffed238_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	52, /* /soc/memory@3ffe5230 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ipm_3ffed238_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ipm_3ffed238_EXISTS 1
#define DT_N_INST_0_espressif_esp32_ipm DT_N_S_soc_S_ipm_3ffed238
#define DT_N_NODELABEL_ipm0             DT_N_S_soc_S_ipm_3ffed238

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ipm_3ffed238_REG_NUM 1
#define DT_N_S_soc_S_ipm_3ffed238_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_REG_IDX_0_VAL_ADDRESS 1073664568 /* 0x3ffed238 */
#define DT_N_S_soc_S_ipm_3ffed238_REG_IDX_0_VAL_SIZE 8 /* 0x8 */
#define DT_N_S_soc_S_ipm_3ffed238_RANGES_NUM 0
#define DT_N_S_soc_S_ipm_3ffed238_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_ipm_3ffed238_IRQ_NUM 2
#define DT_N_S_soc_S_ipm_3ffed238_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_IRQ_IDX_0_VAL_irq 24
#define DT_N_S_soc_S_ipm_3ffed238_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_ipm_3ffed238_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_IRQ_IDX_1_VAL_irq 25
#define DT_N_S_soc_S_ipm_3ffed238_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_IRQ_IDX_1_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_ipm_3ffed238_COMPAT_MATCHES_espressif_esp32_ipm 1
#define DT_N_S_soc_S_ipm_3ffed238_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_ipm_3ffed238_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_COMPAT_MODEL_IDX_0 "esp32-ipm"
#define DT_N_S_soc_S_ipm_3ffed238_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ipm_3ffed238_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ipm_3ffed238_P_reg {1073664568 /* 0x3ffed238 */, 8 /* 0x8 */}
#define DT_N_S_soc_S_ipm_3ffed238_P_reg_IDX_0 1073664568
#define DT_N_S_soc_S_ipm_3ffed238_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_reg_IDX_1 8
#define DT_N_S_soc_S_ipm_3ffed238_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_reg_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_shared_memory DT_N_S_soc_S_memory_3ffe5230
#define DT_N_S_soc_S_ipm_3ffed238_P_shared_memory_IDX_0 DT_N_S_soc_S_memory_3ffe5230
#define DT_N_S_soc_S_ipm_3ffed238_P_shared_memory_IDX_0_PH DT_N_S_soc_S_memory_3ffe5230
#define DT_N_S_soc_S_ipm_3ffed238_P_shared_memory_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_shared_memory_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ipm_3ffed238, shared_memory, 0)
#define DT_N_S_soc_S_ipm_3ffed238_P_shared_memory_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ipm_3ffed238, shared_memory, 0)
#define DT_N_S_soc_S_ipm_3ffed238_P_shared_memory_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ipm_3ffed238, shared_memory, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipm_3ffed238_P_shared_memory_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ipm_3ffed238, shared_memory, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipm_3ffed238_P_shared_memory_LEN 1
#define DT_N_S_soc_S_ipm_3ffed238_P_shared_memory_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_shared_memory_size 1024
#define DT_N_S_soc_S_ipm_3ffed238_P_shared_memory_size_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupts {24 /* 0x18 */, 25 /* 0x19 */}
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupts_IDX_0 24
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupts_IDX_1 25
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_status "disabled"
#define DT_N_S_soc_S_ipm_3ffed238_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_ipm_3ffed238_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_ipm_3ffed238_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ipm_3ffed238_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_ipm_3ffed238_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_ipm_3ffed238_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_ipm_3ffed238_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ipm_3ffed238_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ipm_3ffed238, status, 0)
#define DT_N_S_soc_S_ipm_3ffed238_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ipm_3ffed238, status, 0)
#define DT_N_S_soc_S_ipm_3ffed238_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ipm_3ffed238, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipm_3ffed238_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ipm_3ffed238, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipm_3ffed238_P_status_LEN 1
#define DT_N_S_soc_S_ipm_3ffed238_P_status_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_compatible {"espressif,esp32-ipm"}
#define DT_N_S_soc_S_ipm_3ffed238_P_compatible_IDX_0 "espressif,esp32-ipm"
#define DT_N_S_soc_S_ipm_3ffed238_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-ipm
#define DT_N_S_soc_S_ipm_3ffed238_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_ipm
#define DT_N_S_soc_S_ipm_3ffed238_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_IPM
#define DT_N_S_soc_S_ipm_3ffed238_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ipm_3ffed238, compatible, 0)
#define DT_N_S_soc_S_ipm_3ffed238_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ipm_3ffed238, compatible, 0)
#define DT_N_S_soc_S_ipm_3ffed238_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ipm_3ffed238, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipm_3ffed238_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ipm_3ffed238, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipm_3ffed238_P_compatible_LEN 1
#define DT_N_S_soc_S_ipm_3ffed238_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ipm_3ffed238, interrupt_parent, 0)
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ipm_3ffed238, interrupt_parent, 0)
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ipm_3ffed238, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ipm_3ffed238, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_ipm_3ffed238_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_wakeup_source 0
#define DT_N_S_soc_S_ipm_3ffed238_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_ipm_3ffed238_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_ipm_3ffed238_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/ledc@3ff59000
 *
 * Node identifier: DT_N_S_soc_S_ledc_3ff59000
 *
 * Binding (compatible = espressif,esp32-ledc):
 *   $ZEPHYR_BASE/dts/bindings/pwm/espressif,esp32-ledc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_ledc_3ff59000_PATH "/soc/ledc@3ff59000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ledc_3ff59000_FULL_NAME "ledc@3ff59000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ledc_3ff59000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_ledc_3ff59000_CHILD_IDX 14

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_ledc_3ff59000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ledc_3ff59000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_ledc_3ff59000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ledc_3ff59000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_ledc_3ff59000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ledc_3ff59000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_ledc_3ff59000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_ledc_3ff59000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ledc_3ff59000_ORD 54
#define DT_N_S_soc_S_ledc_3ff59000_ORD_STR_SORTABLE 00054

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ledc_3ff59000_REQUIRES_ORDS \
	3, /* /soc */ \
	5, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ledc_3ff59000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ledc_3ff59000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_ledc DT_N_S_soc_S_ledc_3ff59000
#define DT_N_NODELABEL_ledc0             DT_N_S_soc_S_ledc_3ff59000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ledc_3ff59000_REG_NUM 1
#define DT_N_S_soc_S_ledc_3ff59000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_REG_IDX_0_VAL_ADDRESS 1073057792 /* 0x3ff59000 */
#define DT_N_S_soc_S_ledc_3ff59000_REG_IDX_0_VAL_SIZE 2048 /* 0x800 */
#define DT_N_S_soc_S_ledc_3ff59000_RANGES_NUM 0
#define DT_N_S_soc_S_ledc_3ff59000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_ledc_3ff59000_IRQ_NUM 0
#define DT_N_S_soc_S_ledc_3ff59000_COMPAT_MATCHES_espressif_esp32_ledc 1
#define DT_N_S_soc_S_ledc_3ff59000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_ledc_3ff59000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_COMPAT_MODEL_IDX_0 "esp32-ledc"
#define DT_N_S_soc_S_ledc_3ff59000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ledc_3ff59000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ledc_3ff59000_P_status "disabled"
#define DT_N_S_soc_S_ledc_3ff59000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_ledc_3ff59000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_ledc_3ff59000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ledc_3ff59000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_ledc_3ff59000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_ledc_3ff59000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_ledc_3ff59000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ledc_3ff59000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ledc_3ff59000, status, 0)
#define DT_N_S_soc_S_ledc_3ff59000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ledc_3ff59000, status, 0)
#define DT_N_S_soc_S_ledc_3ff59000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ledc_3ff59000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_3ff59000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ledc_3ff59000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_3ff59000_P_status_LEN 1
#define DT_N_S_soc_S_ledc_3ff59000_P_status_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible {"espressif,esp32-ledc"}
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_IDX_0 "espressif,esp32-ledc"
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-ledc
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_ledc
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_LEDC
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ledc_3ff59000, compatible, 0)
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ledc_3ff59000, compatible, 0)
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ledc_3ff59000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ledc_3ff59000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_LEN 1
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_reg {1073057792 /* 0x3ff59000 */, 2048 /* 0x800 */}
#define DT_N_S_soc_S_ledc_3ff59000_P_reg_IDX_0 1073057792
#define DT_N_S_soc_S_ledc_3ff59000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_reg_IDX_1 2048
#define DT_N_S_soc_S_ledc_3ff59000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_reg_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_ledc_3ff59000_P_clocks_IDX_0_VAL_offset 0
#define DT_N_S_soc_S_ledc_3ff59000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ledc_3ff59000, clocks, 0)
#define DT_N_S_soc_S_ledc_3ff59000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ledc_3ff59000, clocks, 0)
#define DT_N_S_soc_S_ledc_3ff59000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ledc_3ff59000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_3ff59000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ledc_3ff59000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_3ff59000_P_clocks_LEN 1
#define DT_N_S_soc_S_ledc_3ff59000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_wakeup_source 0
#define DT_N_S_soc_S_ledc_3ff59000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_ledc_3ff59000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/mcpwm@3ff5e000
 *
 * Node identifier: DT_N_S_soc_S_mcpwm_3ff5e000
 *
 * Binding (compatible = espressif,esp32-mcpwm):
 *   $ZEPHYR_BASE/dts/bindings/pwm/espressif,esp32-mcpwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_mcpwm_3ff5e000_PATH "/soc/mcpwm@3ff5e000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_mcpwm_3ff5e000_FULL_NAME "mcpwm@3ff5e000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_mcpwm_3ff5e000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_mcpwm_3ff5e000_CHILD_IDX 15

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_mcpwm_3ff5e000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_mcpwm_3ff5e000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_mcpwm_3ff5e000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_mcpwm_3ff5e000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_mcpwm_3ff5e000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_mcpwm_3ff5e000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_mcpwm_3ff5e000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_mcpwm_3ff5e000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_mcpwm_3ff5e000_ORD 55
#define DT_N_S_soc_S_mcpwm_3ff5e000_ORD_STR_SORTABLE 00055

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_mcpwm_3ff5e000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_mcpwm_3ff5e000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_mcpwm_3ff5e000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_mcpwm DT_N_S_soc_S_mcpwm_3ff5e000
#define DT_N_NODELABEL_mcpwm0             DT_N_S_soc_S_mcpwm_3ff5e000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_mcpwm_3ff5e000_REG_NUM 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_REG_IDX_0_VAL_ADDRESS 1073078272 /* 0x3ff5e000 */
#define DT_N_S_soc_S_mcpwm_3ff5e000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_mcpwm_3ff5e000_RANGES_NUM 0
#define DT_N_S_soc_S_mcpwm_3ff5e000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_mcpwm_3ff5e000_IRQ_NUM 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_IRQ_IDX_0_VAL_irq 39
#define DT_N_S_soc_S_mcpwm_3ff5e000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_mcpwm_3ff5e000_COMPAT_MATCHES_espressif_esp32_mcpwm 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_mcpwm_3ff5e000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_COMPAT_MODEL_IDX_0 "esp32-mcpwm"
#define DT_N_S_soc_S_mcpwm_3ff5e000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_mcpwm_3ff5e000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status "disabled"
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_mcpwm_3ff5e000, status, 0)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_mcpwm_3ff5e000, status, 0)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_mcpwm_3ff5e000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_mcpwm_3ff5e000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_LEN 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_status_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_compatible {"espressif,esp32-mcpwm"}
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_compatible_IDX_0 "espressif,esp32-mcpwm"
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-mcpwm
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_mcpwm
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_MCPWM
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_mcpwm_3ff5e000, compatible, 0)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_mcpwm_3ff5e000, compatible, 0)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_mcpwm_3ff5e000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_mcpwm_3ff5e000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_compatible_LEN 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_reg {1073078272 /* 0x3ff5e000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_reg_IDX_0 1073078272
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_reg_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_interrupts {39 /* 0x27 */}
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_interrupts_IDX_0 39
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_mcpwm_3ff5e000, interrupt_parent, 0)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_mcpwm_3ff5e000, interrupt_parent, 0)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_mcpwm_3ff5e000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_mcpwm_3ff5e000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_clocks_IDX_0_VAL_offset 10
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_mcpwm_3ff5e000, clocks, 0)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_mcpwm_3ff5e000, clocks, 0)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_mcpwm_3ff5e000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_mcpwm_3ff5e000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_clocks_LEN 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_wakeup_source 0
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_mcpwm_3ff5e000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/mcpwm@3ff6c000
 *
 * Node identifier: DT_N_S_soc_S_mcpwm_3ff6c000
 *
 * Binding (compatible = espressif,esp32-mcpwm):
 *   $ZEPHYR_BASE/dts/bindings/pwm/espressif,esp32-mcpwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_mcpwm_3ff6c000_PATH "/soc/mcpwm@3ff6c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_mcpwm_3ff6c000_FULL_NAME "mcpwm@3ff6c000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_mcpwm_3ff6c000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_mcpwm_3ff6c000_CHILD_IDX 16

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_mcpwm_3ff6c000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_mcpwm_3ff6c000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_mcpwm_3ff6c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_mcpwm_3ff6c000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_mcpwm_3ff6c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_mcpwm_3ff6c000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_mcpwm_3ff6c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_mcpwm_3ff6c000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_mcpwm_3ff6c000_ORD 56
#define DT_N_S_soc_S_mcpwm_3ff6c000_ORD_STR_SORTABLE 00056

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_mcpwm_3ff6c000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_mcpwm_3ff6c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_mcpwm_3ff6c000_EXISTS 1
#define DT_N_INST_1_espressif_esp32_mcpwm DT_N_S_soc_S_mcpwm_3ff6c000
#define DT_N_NODELABEL_mcpwm1             DT_N_S_soc_S_mcpwm_3ff6c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_mcpwm_3ff6c000_REG_NUM 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_REG_IDX_0_VAL_ADDRESS 1073135616 /* 0x3ff6c000 */
#define DT_N_S_soc_S_mcpwm_3ff6c000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_mcpwm_3ff6c000_RANGES_NUM 0
#define DT_N_S_soc_S_mcpwm_3ff6c000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_mcpwm_3ff6c000_IRQ_NUM 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_IRQ_IDX_0_VAL_irq 40
#define DT_N_S_soc_S_mcpwm_3ff6c000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_mcpwm_3ff6c000_COMPAT_MATCHES_espressif_esp32_mcpwm 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_mcpwm_3ff6c000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_COMPAT_MODEL_IDX_0 "esp32-mcpwm"
#define DT_N_S_soc_S_mcpwm_3ff6c000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_mcpwm_3ff6c000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status "disabled"
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_mcpwm_3ff6c000, status, 0)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_mcpwm_3ff6c000, status, 0)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_mcpwm_3ff6c000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_mcpwm_3ff6c000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_LEN 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_status_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_compatible {"espressif,esp32-mcpwm"}
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_compatible_IDX_0 "espressif,esp32-mcpwm"
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-mcpwm
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_mcpwm
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_MCPWM
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_mcpwm_3ff6c000, compatible, 0)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_mcpwm_3ff6c000, compatible, 0)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_mcpwm_3ff6c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_mcpwm_3ff6c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_compatible_LEN 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_reg {1073135616 /* 0x3ff6c000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_reg_IDX_0 1073135616
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_interrupts {40 /* 0x28 */}
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_interrupts_IDX_0 40
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_mcpwm_3ff6c000, interrupt_parent, 0)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_mcpwm_3ff6c000, interrupt_parent, 0)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_mcpwm_3ff6c000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_mcpwm_3ff6c000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_clocks_IDX_0_VAL_offset 11
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_mcpwm_3ff6c000, clocks, 0)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_mcpwm_3ff6c000, clocks, 0)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_mcpwm_3ff6c000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_mcpwm_3ff6c000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_clocks_LEN 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_wakeup_source 0
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_mcpwm_3ff6c000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/memory@3ffb0000
 *
 * Node identifier: DT_N_S_soc_S_memory_3ffb0000
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_3ffb0000_PATH "/soc/memory@3ffb0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_3ffb0000_FULL_NAME "memory@3ffb0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_3ffb0000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_memory_3ffb0000_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_3ffb0000_ORD 57
#define DT_N_S_soc_S_memory_3ffb0000_ORD_STR_SORTABLE 00057

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_3ffb0000_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_3ffb0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_3ffb0000_EXISTS 1
#define DT_N_INST_0_mmio_sram DT_N_S_soc_S_memory_3ffb0000
#define DT_N_NODELABEL_sram0  DT_N_S_soc_S_memory_3ffb0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_memory_3ffb0000_REG_NUM 1
#define DT_N_S_soc_S_memory_3ffb0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_REG_IDX_0_VAL_ADDRESS 1073414144 /* 0x3ffb0000 */
#define DT_N_S_soc_S_memory_3ffb0000_REG_IDX_0_VAL_SIZE 180736 /* 0x2c200 */
#define DT_N_S_soc_S_memory_3ffb0000_RANGES_NUM 0
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_memory_3ffb0000_IRQ_NUM 0
#define DT_N_S_soc_S_memory_3ffb0000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_3ffb0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_memory_3ffb0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_memory_3ffb0000_P_reg {1073414144 /* 0x3ffb0000 */, 180736 /* 0x2c200 */}
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_IDX_0 1073414144
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_IDX_1 180736
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible {"mmio-sram"}
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_IDX_0_STRING_UNQUOTED mmio-sram
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_IDX_0_STRING_TOKEN mmio_sram
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_IDX_0_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_3ffb0000, compatible, 0)
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_3ffb0000, compatible, 0)
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3ffb0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_3ffb0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_LEN 1
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_wakeup_source 0
#define DT_N_S_soc_S_memory_3ffb0000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_memory_3ffb0000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/memory@3ffe5630
 *
 * Node identifier: DT_N_S_soc_S_memory_3ffe5630
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_3ffe5630_PATH "/soc/memory@3ffe5630"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_3ffe5630_FULL_NAME "memory@3ffe5630"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_3ffe5630_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_memory_3ffe5630_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_memory_3ffe5630_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_3ffe5630_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_3ffe5630_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_3ffe5630_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_memory_3ffe5630_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_memory_3ffe5630_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_3ffe5630_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_3ffe5630_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_3ffe5630_ORD 58
#define DT_N_S_soc_S_memory_3ffe5630_ORD_STR_SORTABLE 00058

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_3ffe5630_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_3ffe5630_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_3ffe5630_EXISTS 1
#define DT_N_INST_2_mmio_sram DT_N_S_soc_S_memory_3ffe5630
#define DT_N_NODELABEL_shm0   DT_N_S_soc_S_memory_3ffe5630

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_memory_3ffe5630_REG_NUM 1
#define DT_N_S_soc_S_memory_3ffe5630_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffe5630_REG_IDX_0_VAL_ADDRESS 1073632816 /* 0x3ffe5630 */
#define DT_N_S_soc_S_memory_3ffe5630_REG_IDX_0_VAL_SIZE 15360 /* 0x3c00 */
#define DT_N_S_soc_S_memory_3ffe5630_RANGES_NUM 0
#define DT_N_S_soc_S_memory_3ffe5630_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_memory_3ffe5630_IRQ_NUM 0
#define DT_N_S_soc_S_memory_3ffe5630_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_3ffe5630_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_memory_3ffe5630_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_memory_3ffe5630_P_reg {1073632816 /* 0x3ffe5630 */, 15360 /* 0x3c00 */}
#define DT_N_S_soc_S_memory_3ffe5630_P_reg_IDX_0 1073632816
#define DT_N_S_soc_S_memory_3ffe5630_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffe5630_P_reg_IDX_1 15360
#define DT_N_S_soc_S_memory_3ffe5630_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_3ffe5630_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_3ffe5630_P_compatible {"mmio-sram"}
#define DT_N_S_soc_S_memory_3ffe5630_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_soc_S_memory_3ffe5630_P_compatible_IDX_0_STRING_UNQUOTED mmio-sram
#define DT_N_S_soc_S_memory_3ffe5630_P_compatible_IDX_0_STRING_TOKEN mmio_sram
#define DT_N_S_soc_S_memory_3ffe5630_P_compatible_IDX_0_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_soc_S_memory_3ffe5630_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffe5630_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_3ffe5630, compatible, 0)
#define DT_N_S_soc_S_memory_3ffe5630_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_3ffe5630, compatible, 0)
#define DT_N_S_soc_S_memory_3ffe5630_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3ffe5630, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3ffe5630_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_3ffe5630, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3ffe5630_P_compatible_LEN 1
#define DT_N_S_soc_S_memory_3ffe5630_P_compatible_EXISTS 1
#define DT_N_S_soc_S_memory_3ffe5630_P_wakeup_source 0
#define DT_N_S_soc_S_memory_3ffe5630_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_memory_3ffe5630_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_memory_3ffe5630_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/pcnt@3ff57000
 *
 * Node identifier: DT_N_S_soc_S_pcnt_3ff57000
 *
 * Binding (compatible = espressif,esp32-pcnt):
 *   $ZEPHYR_BASE/dts/bindings/sensor/espressif,esp32-pcnt.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pcnt_3ff57000_PATH "/soc/pcnt@3ff57000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pcnt_3ff57000_FULL_NAME "pcnt@3ff57000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_pcnt_3ff57000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pcnt_3ff57000_CHILD_IDX 13

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pcnt_3ff57000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pcnt_3ff57000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_pcnt_3ff57000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pcnt_3ff57000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_pcnt_3ff57000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pcnt_3ff57000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_pcnt_3ff57000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_pcnt_3ff57000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pcnt_3ff57000_ORD 59
#define DT_N_S_soc_S_pcnt_3ff57000_ORD_STR_SORTABLE 00059

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pcnt_3ff57000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pcnt_3ff57000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pcnt_3ff57000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_pcnt DT_N_S_soc_S_pcnt_3ff57000
#define DT_N_NODELABEL_pcnt              DT_N_S_soc_S_pcnt_3ff57000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pcnt_3ff57000_REG_NUM 1
#define DT_N_S_soc_S_pcnt_3ff57000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_REG_IDX_0_VAL_ADDRESS 1073049600 /* 0x3ff57000 */
#define DT_N_S_soc_S_pcnt_3ff57000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_pcnt_3ff57000_RANGES_NUM 0
#define DT_N_S_soc_S_pcnt_3ff57000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pcnt_3ff57000_IRQ_NUM 1
#define DT_N_S_soc_S_pcnt_3ff57000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_IRQ_IDX_0_VAL_irq 48
#define DT_N_S_soc_S_pcnt_3ff57000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_pcnt_3ff57000_COMPAT_MATCHES_espressif_esp32_pcnt 1
#define DT_N_S_soc_S_pcnt_3ff57000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_pcnt_3ff57000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_COMPAT_MODEL_IDX_0 "esp32-pcnt"
#define DT_N_S_soc_S_pcnt_3ff57000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pcnt_3ff57000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pcnt_3ff57000_P_status "disabled"
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pcnt_3ff57000, status, 0)
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pcnt_3ff57000, status, 0)
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pcnt_3ff57000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pcnt_3ff57000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_LEN 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_status_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_compatible {"espressif,esp32-pcnt"}
#define DT_N_S_soc_S_pcnt_3ff57000_P_compatible_IDX_0 "espressif,esp32-pcnt"
#define DT_N_S_soc_S_pcnt_3ff57000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-pcnt
#define DT_N_S_soc_S_pcnt_3ff57000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_pcnt
#define DT_N_S_soc_S_pcnt_3ff57000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_PCNT
#define DT_N_S_soc_S_pcnt_3ff57000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pcnt_3ff57000, compatible, 0)
#define DT_N_S_soc_S_pcnt_3ff57000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pcnt_3ff57000, compatible, 0)
#define DT_N_S_soc_S_pcnt_3ff57000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pcnt_3ff57000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pcnt_3ff57000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pcnt_3ff57000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pcnt_3ff57000_P_compatible_LEN 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_reg {1073049600 /* 0x3ff57000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_pcnt_3ff57000_P_reg_IDX_0 1073049600
#define DT_N_S_soc_S_pcnt_3ff57000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_pcnt_3ff57000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_reg_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_interrupts {48 /* 0x30 */}
#define DT_N_S_soc_S_pcnt_3ff57000_P_interrupts_IDX_0 48
#define DT_N_S_soc_S_pcnt_3ff57000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_pcnt_3ff57000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_pcnt_3ff57000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_pcnt_3ff57000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pcnt_3ff57000, interrupt_parent, 0)
#define DT_N_S_soc_S_pcnt_3ff57000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pcnt_3ff57000, interrupt_parent, 0)
#define DT_N_S_soc_S_pcnt_3ff57000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pcnt_3ff57000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pcnt_3ff57000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pcnt_3ff57000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pcnt_3ff57000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_pcnt_3ff57000_P_clocks_IDX_0_VAL_offset 15
#define DT_N_S_soc_S_pcnt_3ff57000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pcnt_3ff57000, clocks, 0)
#define DT_N_S_soc_S_pcnt_3ff57000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pcnt_3ff57000, clocks, 0)
#define DT_N_S_soc_S_pcnt_3ff57000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pcnt_3ff57000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pcnt_3ff57000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pcnt_3ff57000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pcnt_3ff57000_P_clocks_LEN 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_wakeup_source 0
#define DT_N_S_soc_S_pcnt_3ff57000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_pcnt_3ff57000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_pcnt_3ff57000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/psram@3f800000
 *
 * Node identifier: DT_N_S_soc_S_psram_3f800000
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_psram_3f800000_PATH "/soc/psram@3f800000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_psram_3f800000_FULL_NAME "psram@3f800000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_psram_3f800000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_psram_3f800000_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_psram_3f800000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_psram_3f800000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_psram_3f800000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_psram_3f800000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_psram_3f800000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_psram_3f800000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_psram_3f800000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_psram_3f800000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_psram_3f800000_ORD 60
#define DT_N_S_soc_S_psram_3f800000_ORD_STR_SORTABLE 00060

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_psram_3f800000_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_psram_3f800000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_psram_3f800000_EXISTS 1
#define DT_N_INST_3_mmio_sram DT_N_S_soc_S_psram_3f800000
#define DT_N_NODELABEL_psram0 DT_N_S_soc_S_psram_3f800000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_psram_3f800000_REG_NUM 1
#define DT_N_S_soc_S_psram_3f800000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_psram_3f800000_REG_IDX_0_VAL_ADDRESS 1065353216 /* 0x3f800000 */
#define DT_N_S_soc_S_psram_3f800000_REG_IDX_0_VAL_SIZE 2097152 /* 0x200000 */
#define DT_N_S_soc_S_psram_3f800000_RANGES_NUM 0
#define DT_N_S_soc_S_psram_3f800000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_psram_3f800000_IRQ_NUM 0
#define DT_N_S_soc_S_psram_3f800000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_psram_3f800000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_psram_3f800000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_psram_3f800000_P_reg {1065353216 /* 0x3f800000 */, 2097152 /* 0x200000 */}
#define DT_N_S_soc_S_psram_3f800000_P_reg_IDX_0 1065353216
#define DT_N_S_soc_S_psram_3f800000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_psram_3f800000_P_reg_IDX_1 2097152
#define DT_N_S_soc_S_psram_3f800000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_psram_3f800000_P_reg_EXISTS 1
#define DT_N_S_soc_S_psram_3f800000_P_status "disabled"
#define DT_N_S_soc_S_psram_3f800000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_psram_3f800000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_psram_3f800000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_psram_3f800000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_psram_3f800000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_psram_3f800000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_psram_3f800000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_psram_3f800000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_psram_3f800000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_psram_3f800000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_psram_3f800000, status, 0)
#define DT_N_S_soc_S_psram_3f800000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_psram_3f800000, status, 0)
#define DT_N_S_soc_S_psram_3f800000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_psram_3f800000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_psram_3f800000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_psram_3f800000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_psram_3f800000_P_status_LEN 1
#define DT_N_S_soc_S_psram_3f800000_P_status_EXISTS 1
#define DT_N_S_soc_S_psram_3f800000_P_compatible {"mmio-sram"}
#define DT_N_S_soc_S_psram_3f800000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_soc_S_psram_3f800000_P_compatible_IDX_0_STRING_UNQUOTED mmio-sram
#define DT_N_S_soc_S_psram_3f800000_P_compatible_IDX_0_STRING_TOKEN mmio_sram
#define DT_N_S_soc_S_psram_3f800000_P_compatible_IDX_0_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_soc_S_psram_3f800000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_psram_3f800000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_psram_3f800000, compatible, 0)
#define DT_N_S_soc_S_psram_3f800000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_psram_3f800000, compatible, 0)
#define DT_N_S_soc_S_psram_3f800000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_psram_3f800000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_psram_3f800000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_psram_3f800000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_psram_3f800000_P_compatible_LEN 1
#define DT_N_S_soc_S_psram_3f800000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_psram_3f800000_P_wakeup_source 0
#define DT_N_S_soc_S_psram_3f800000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_psram_3f800000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_psram_3f800000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/spi@3ff64000
 *
 * Node identifier: DT_N_S_soc_S_spi_3ff64000
 *
 * Binding (compatible = espressif,esp32-spi):
 *   $ZEPHYR_BASE/dts/bindings/spi/espressif,esp32-spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_3ff64000_PATH "/soc/spi@3ff64000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_3ff64000_FULL_NAME "spi@3ff64000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_3ff64000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_spi_3ff64000_CHILD_IDX 24

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_3ff64000_ORD 61
#define DT_N_S_soc_S_spi_3ff64000_ORD_STR_SORTABLE 00061

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_3ff64000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */ \
	25, /* /pin-controller/spim2_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_3ff64000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_3ff64000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_spi DT_N_S_soc_S_spi_3ff64000
#define DT_N_NODELABEL_spi2             DT_N_S_soc_S_spi_3ff64000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_3ff64000_REG_NUM 1
#define DT_N_S_soc_S_spi_3ff64000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_REG_IDX_0_VAL_ADDRESS 1073102848 /* 0x3ff64000 */
#define DT_N_S_soc_S_spi_3ff64000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_spi_3ff64000_RANGES_NUM 0
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_spi_3ff64000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_3ff64000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_IRQ_IDX_0_VAL_irq 30
#define DT_N_S_soc_S_spi_3ff64000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_spi_3ff64000_COMPAT_MATCHES_espressif_esp32_spi 1
#define DT_N_S_soc_S_spi_3ff64000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_spi_3ff64000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_COMPAT_MODEL_IDX_0 "esp32-spi"
#define DT_N_S_soc_S_spi_3ff64000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_3ff64000_PINCTRL_NUM 1
#define DT_N_S_soc_S_spi_3ff64000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_spi_3ff64000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_spi_3ff64000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_spi_3ff64000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_spim2_default

/* Generic property macros: */
#define DT_N_S_soc_S_spi_3ff64000_P_reg {1073102848 /* 0x3ff64000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_spi_3ff64000_P_reg_IDX_0 1073102848
#define DT_N_S_soc_S_spi_3ff64000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_spi_3ff64000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_spim2_default
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_spim2_default
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, pinctrl_0, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_3ff64000, pinctrl_0, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff64000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_3ff64000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, pinctrl_names, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_3ff64000, pinctrl_names, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff64000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_3ff64000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_spi_3ff64000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_half_duplex 0
#define DT_N_S_soc_S_spi_3ff64000_P_half_duplex_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_dummy_comp 0
#define DT_N_S_soc_S_spi_3ff64000_P_dummy_comp_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_sio 0
#define DT_N_S_soc_S_spi_3ff64000_P_sio_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_dma_enabled 0
#define DT_N_S_soc_S_spi_3ff64000_P_dma_enabled_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_dma_clk 19
#define DT_N_S_soc_S_spi_3ff64000_P_dma_clk_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_dma_host 0
#define DT_N_S_soc_S_spi_3ff64000_P_dma_host_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_clk_as_cs 0
#define DT_N_S_soc_S_spi_3ff64000_P_clk_as_cs_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_positive_cs 0
#define DT_N_S_soc_S_spi_3ff64000_P_positive_cs_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_use_iomux 0
#define DT_N_S_soc_S_spi_3ff64000_P_use_iomux_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_line_idle_low 0
#define DT_N_S_soc_S_spi_3ff64000_P_line_idle_low_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_status "okay"
#define DT_N_S_soc_S_spi_3ff64000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_spi_3ff64000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_spi_3ff64000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_3ff64000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_spi_3ff64000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_spi_3ff64000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_spi_3ff64000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_3ff64000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, status, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_3ff64000, status, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff64000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_3ff64000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_status_LEN 1
#define DT_N_S_soc_S_spi_3ff64000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_compatible {"espressif,esp32-spi"}
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_IDX_0 "espressif,esp32-spi"
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-spi
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_spi
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_SPI
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, compatible, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_3ff64000, compatible, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff64000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_3ff64000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_interrupts {30 /* 0x1e */}
#define DT_N_S_soc_S_spi_3ff64000_P_interrupts_IDX_0 30
#define DT_N_S_soc_S_spi_3ff64000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, interrupt_parent, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_3ff64000, interrupt_parent, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff64000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_3ff64000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_IDX_0_VAL_offset 17
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, clocks, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_3ff64000, clocks, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff64000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_3ff64000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_LEN 1
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_3ff64000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_spi_3ff64000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/spi@3ff65000
 *
 * Node identifier: DT_N_S_soc_S_spi_3ff65000
 *
 * Binding (compatible = espressif,esp32-spi):
 *   $ZEPHYR_BASE/dts/bindings/spi/espressif,esp32-spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_3ff65000_PATH "/soc/spi@3ff65000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_3ff65000_FULL_NAME "spi@3ff65000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_3ff65000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_spi_3ff65000_CHILD_IDX 25

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_3ff65000_ORD 62
#define DT_N_S_soc_S_spi_3ff65000_ORD_STR_SORTABLE 00062

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_3ff65000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */ \
	28, /* /pin-controller/spim3_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_3ff65000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_3ff65000_EXISTS 1
#define DT_N_INST_1_espressif_esp32_spi DT_N_S_soc_S_spi_3ff65000
#define DT_N_NODELABEL_spi3             DT_N_S_soc_S_spi_3ff65000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_3ff65000_REG_NUM 1
#define DT_N_S_soc_S_spi_3ff65000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_REG_IDX_0_VAL_ADDRESS 1073106944 /* 0x3ff65000 */
#define DT_N_S_soc_S_spi_3ff65000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_spi_3ff65000_RANGES_NUM 0
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_spi_3ff65000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_3ff65000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_IRQ_IDX_0_VAL_irq 31
#define DT_N_S_soc_S_spi_3ff65000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_spi_3ff65000_COMPAT_MATCHES_espressif_esp32_spi 1
#define DT_N_S_soc_S_spi_3ff65000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_spi_3ff65000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_COMPAT_MODEL_IDX_0 "esp32-spi"
#define DT_N_S_soc_S_spi_3ff65000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_3ff65000_PINCTRL_NUM 1
#define DT_N_S_soc_S_spi_3ff65000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_spi_3ff65000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_spi_3ff65000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_spi_3ff65000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_spim3_default

/* Generic property macros: */
#define DT_N_S_soc_S_spi_3ff65000_P_reg {1073106944 /* 0x3ff65000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_spi_3ff65000_P_reg_IDX_0 1073106944
#define DT_N_S_soc_S_spi_3ff65000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_spi_3ff65000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_spim3_default
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_spim3_default
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, pinctrl_0, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_3ff65000, pinctrl_0, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_3ff65000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, pinctrl_names, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_3ff65000, pinctrl_names, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_3ff65000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_half_duplex 0
#define DT_N_S_soc_S_spi_3ff65000_P_half_duplex_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_dummy_comp 0
#define DT_N_S_soc_S_spi_3ff65000_P_dummy_comp_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_sio 0
#define DT_N_S_soc_S_spi_3ff65000_P_sio_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_dma_enabled 0
#define DT_N_S_soc_S_spi_3ff65000_P_dma_enabled_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_dma_clk 19
#define DT_N_S_soc_S_spi_3ff65000_P_dma_clk_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_dma_host 1
#define DT_N_S_soc_S_spi_3ff65000_P_dma_host_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_clk_as_cs 0
#define DT_N_S_soc_S_spi_3ff65000_P_clk_as_cs_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_positive_cs 0
#define DT_N_S_soc_S_spi_3ff65000_P_positive_cs_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_use_iomux 0
#define DT_N_S_soc_S_spi_3ff65000_P_use_iomux_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_line_idle_low 0
#define DT_N_S_soc_S_spi_3ff65000_P_line_idle_low_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_status "okay"
#define DT_N_S_soc_S_spi_3ff65000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_spi_3ff65000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_spi_3ff65000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_3ff65000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_spi_3ff65000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_spi_3ff65000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_spi_3ff65000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_3ff65000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, status, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_3ff65000, status, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_3ff65000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_status_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_compatible {"espressif,esp32-spi"}
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_IDX_0 "espressif,esp32-spi"
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-spi
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_spi
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_SPI
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, compatible, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_3ff65000, compatible, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_3ff65000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_interrupts {31 /* 0x1f */}
#define DT_N_S_soc_S_spi_3ff65000_P_interrupts_IDX_0 31
#define DT_N_S_soc_S_spi_3ff65000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, interrupt_parent, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_3ff65000, interrupt_parent, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_3ff65000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_IDX_0_VAL_offset 18
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, clocks, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_3ff65000, clocks, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_3ff65000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_3ff65000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_spi_3ff65000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/touch@3ff48858
 *
 * Node identifier: DT_N_S_soc_S_touch_3ff48858
 *
 * Binding (compatible = espressif,esp32-touch):
 *   $ZEPHYR_BASE/dts/bindings/input/espressif,esp32-touch-sensor.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_touch_3ff48858_PATH "/soc/touch@3ff48858"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_touch_3ff48858_FULL_NAME "touch@3ff48858"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_touch_3ff48858_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_touch_3ff48858_CHILD_IDX 18

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_touch_3ff48858_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_touch_3ff48858_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_touch_3ff48858_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_touch_3ff48858_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_touch_3ff48858_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_touch_3ff48858_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_touch_3ff48858_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_touch_3ff48858_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_touch_3ff48858_ORD 63
#define DT_N_S_soc_S_touch_3ff48858_ORD_STR_SORTABLE 00063

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_touch_3ff48858_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_touch_3ff48858_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_touch_3ff48858_EXISTS 1
#define DT_N_INST_0_espressif_esp32_touch DT_N_S_soc_S_touch_3ff48858
#define DT_N_NODELABEL_touch              DT_N_S_soc_S_touch_3ff48858

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_touch_3ff48858_REG_NUM 1
#define DT_N_S_soc_S_touch_3ff48858_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_REG_IDX_0_VAL_ADDRESS 1072990296 /* 0x3ff48858 */
#define DT_N_S_soc_S_touch_3ff48858_REG_IDX_0_VAL_SIZE 56 /* 0x38 */
#define DT_N_S_soc_S_touch_3ff48858_RANGES_NUM 0
#define DT_N_S_soc_S_touch_3ff48858_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_touch_3ff48858_IRQ_NUM 1
#define DT_N_S_soc_S_touch_3ff48858_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_IRQ_IDX_0_VAL_irq 46
#define DT_N_S_soc_S_touch_3ff48858_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_touch_3ff48858_COMPAT_MATCHES_espressif_esp32_touch 1
#define DT_N_S_soc_S_touch_3ff48858_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_touch_3ff48858_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_COMPAT_MODEL_IDX_0 "esp32-touch"
#define DT_N_S_soc_S_touch_3ff48858_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_touch_3ff48858_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_touch_3ff48858_P_debounce_interval_ms 30
#define DT_N_S_soc_S_touch_3ff48858_P_debounce_interval_ms_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_href_microvolt 2700000
#define DT_N_S_soc_S_touch_3ff48858_P_href_microvolt_ENUM_IDX 3
#define DT_N_S_soc_S_touch_3ff48858_P_href_microvolt_ENUM_VAL_2700000_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_href_microvolt_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_lref_microvolt 500000
#define DT_N_S_soc_S_touch_3ff48858_P_lref_microvolt_ENUM_IDX 0
#define DT_N_S_soc_S_touch_3ff48858_P_lref_microvolt_ENUM_VAL_500000_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_lref_microvolt_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_href_atten_microvolt 1000000
#define DT_N_S_soc_S_touch_3ff48858_P_href_atten_microvolt_ENUM_IDX 1
#define DT_N_S_soc_S_touch_3ff48858_P_href_atten_microvolt_ENUM_VAL_1000000_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_href_atten_microvolt_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_filter_mode 2
#define DT_N_S_soc_S_touch_3ff48858_P_filter_mode_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_filter_debounce_cnt 1
#define DT_N_S_soc_S_touch_3ff48858_P_filter_debounce_cnt_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_filter_noise_thr 0
#define DT_N_S_soc_S_touch_3ff48858_P_filter_noise_thr_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_filter_jitter_step 4
#define DT_N_S_soc_S_touch_3ff48858_P_filter_jitter_step_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_filter_smooth_level 1
#define DT_N_S_soc_S_touch_3ff48858_P_filter_smooth_level_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_status "disabled"
#define DT_N_S_soc_S_touch_3ff48858_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_touch_3ff48858_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_touch_3ff48858_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_touch_3ff48858_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_touch_3ff48858_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_touch_3ff48858_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_touch_3ff48858_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_touch_3ff48858_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_touch_3ff48858, status, 0)
#define DT_N_S_soc_S_touch_3ff48858_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_touch_3ff48858, status, 0)
#define DT_N_S_soc_S_touch_3ff48858_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_touch_3ff48858, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_touch_3ff48858_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_touch_3ff48858, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_touch_3ff48858_P_status_LEN 1
#define DT_N_S_soc_S_touch_3ff48858_P_status_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_compatible {"espressif,esp32-touch"}
#define DT_N_S_soc_S_touch_3ff48858_P_compatible_IDX_0 "espressif,esp32-touch"
#define DT_N_S_soc_S_touch_3ff48858_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-touch
#define DT_N_S_soc_S_touch_3ff48858_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_touch
#define DT_N_S_soc_S_touch_3ff48858_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TOUCH
#define DT_N_S_soc_S_touch_3ff48858_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_touch_3ff48858, compatible, 0)
#define DT_N_S_soc_S_touch_3ff48858_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_touch_3ff48858, compatible, 0)
#define DT_N_S_soc_S_touch_3ff48858_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_touch_3ff48858, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_touch_3ff48858_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_touch_3ff48858, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_touch_3ff48858_P_compatible_LEN 1
#define DT_N_S_soc_S_touch_3ff48858_P_compatible_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_reg {1072990296 /* 0x3ff48858 */, 56 /* 0x38 */}
#define DT_N_S_soc_S_touch_3ff48858_P_reg_IDX_0 1072990296
#define DT_N_S_soc_S_touch_3ff48858_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_reg_IDX_1 56
#define DT_N_S_soc_S_touch_3ff48858_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_reg_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_interrupts {46 /* 0x2e */}
#define DT_N_S_soc_S_touch_3ff48858_P_interrupts_IDX_0 46
#define DT_N_S_soc_S_touch_3ff48858_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_touch_3ff48858_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_touch_3ff48858_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_touch_3ff48858_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_touch_3ff48858, interrupt_parent, 0)
#define DT_N_S_soc_S_touch_3ff48858_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_touch_3ff48858, interrupt_parent, 0)
#define DT_N_S_soc_S_touch_3ff48858_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_touch_3ff48858, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_touch_3ff48858_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_touch_3ff48858, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_touch_3ff48858_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_touch_3ff48858_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_wakeup_source 0
#define DT_N_S_soc_S_touch_3ff48858_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_touch_3ff48858_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_touch_3ff48858_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/trng@3ff75144
 *
 * Node identifier: DT_N_S_soc_S_trng_3ff75144
 *
 * Binding (compatible = espressif,esp32-trng):
 *   $ZEPHYR_BASE/dts/bindings/rng/espressif,esp32-trng.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_trng_3ff75144_PATH "/soc/trng@3ff75144"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_trng_3ff75144_FULL_NAME "trng@3ff75144"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_trng_3ff75144_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_trng_3ff75144_CHILD_IDX 21

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_trng_3ff75144_ORD 64
#define DT_N_S_soc_S_trng_3ff75144_ORD_STR_SORTABLE 00064

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_trng_3ff75144_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_trng_3ff75144_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_trng_3ff75144_EXISTS 1
#define DT_N_INST_0_espressif_esp32_trng DT_N_S_soc_S_trng_3ff75144
#define DT_N_NODELABEL_trng0             DT_N_S_soc_S_trng_3ff75144

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_trng_3ff75144_REG_NUM 1
#define DT_N_S_soc_S_trng_3ff75144_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_REG_IDX_0_VAL_ADDRESS 1073172804 /* 0x3ff75144 */
#define DT_N_S_soc_S_trng_3ff75144_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_trng_3ff75144_RANGES_NUM 0
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_trng_3ff75144_IRQ_NUM 0
#define DT_N_S_soc_S_trng_3ff75144_COMPAT_MATCHES_espressif_esp32_trng 1
#define DT_N_S_soc_S_trng_3ff75144_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_trng_3ff75144_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_COMPAT_MODEL_IDX_0 "esp32-trng"
#define DT_N_S_soc_S_trng_3ff75144_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_trng_3ff75144_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_trng_3ff75144_P_reg {1073172804 /* 0x3ff75144 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_trng_3ff75144_P_reg_IDX_0 1073172804
#define DT_N_S_soc_S_trng_3ff75144_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_reg_IDX_1 4
#define DT_N_S_soc_S_trng_3ff75144_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_reg_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_status "okay"
#define DT_N_S_soc_S_trng_3ff75144_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_trng_3ff75144_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_trng_3ff75144_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_trng_3ff75144_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_trng_3ff75144_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_trng_3ff75144_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_trng_3ff75144_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_trng_3ff75144_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff75144, status, 0)
#define DT_N_S_soc_S_trng_3ff75144_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_trng_3ff75144, status, 0)
#define DT_N_S_soc_S_trng_3ff75144_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_trng_3ff75144, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff75144_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_trng_3ff75144, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff75144_P_status_LEN 1
#define DT_N_S_soc_S_trng_3ff75144_P_status_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_compatible {"espressif,esp32-trng"}
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_IDX_0 "espressif,esp32-trng"
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-trng
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_trng
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TRNG
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff75144, compatible, 0)
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_trng_3ff75144, compatible, 0)
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_trng_3ff75144, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_trng_3ff75144, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_LEN 1
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_wakeup_source 0
#define DT_N_S_soc_S_trng_3ff75144_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_trng_3ff75144_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/uart@3ff40000
 *
 * Node identifier: DT_N_S_soc_S_uart_3ff40000
 *
 * Binding (compatible = espressif,esp32-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_3ff40000_PATH "/soc/uart@3ff40000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_3ff40000_FULL_NAME "uart@3ff40000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_3ff40000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_3ff40000_CHILD_IDX 10

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_3ff40000_ORD 65
#define DT_N_S_soc_S_uart_3ff40000_ORD_STR_SORTABLE 00065

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_3ff40000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */ \
	31, /* /pin-controller/uart0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_3ff40000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_3ff40000_EXISTS 1
#define DT_N_ALIAS_uart_0                DT_N_S_soc_S_uart_3ff40000
#define DT_N_INST_0_espressif_esp32_uart DT_N_S_soc_S_uart_3ff40000
#define DT_N_NODELABEL_uart0             DT_N_S_soc_S_uart_3ff40000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_3ff40000_REG_NUM 1
#define DT_N_S_soc_S_uart_3ff40000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_REG_IDX_0_VAL_ADDRESS 1072955392 /* 0x3ff40000 */
#define DT_N_S_soc_S_uart_3ff40000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_3ff40000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_3ff40000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_3ff40000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_IRQ_IDX_0_VAL_irq 34
#define DT_N_S_soc_S_uart_3ff40000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff40000_COMPAT_MATCHES_espressif_esp32_uart 1
#define DT_N_S_soc_S_uart_3ff40000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_uart_3ff40000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_COMPAT_MODEL_IDX_0 "esp32-uart"
#define DT_N_S_soc_S_uart_3ff40000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_3ff40000_PINCTRL_NUM 1
#define DT_N_S_soc_S_uart_3ff40000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_uart_3ff40000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_uart_3ff40000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_uart_3ff40000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_uart0_default

/* Generic property macros: */
#define DT_N_S_soc_S_uart_3ff40000_P_reg {1072955392 /* 0x3ff40000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_3ff40000_P_reg_IDX_0 1072955392
#define DT_N_S_soc_S_uart_3ff40000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_3ff40000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_uart0_default
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_uart0_default
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, pinctrl_0, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff40000, pinctrl_0, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff40000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff40000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, pinctrl_names, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff40000, pinctrl_names, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff40000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff40000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_uart_3ff40000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_hw_rs485_hd_mode 0
#define DT_N_S_soc_S_uart_3ff40000_P_hw_rs485_hd_mode_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_current_speed 115200
#define DT_N_S_soc_S_uart_3ff40000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_3ff40000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_status "okay"
#define DT_N_S_soc_S_uart_3ff40000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_uart_3ff40000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_3ff40000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_3ff40000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_uart_3ff40000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_3ff40000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_3ff40000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_3ff40000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, status, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff40000, status, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff40000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff40000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_status_LEN 1
#define DT_N_S_soc_S_uart_3ff40000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_compatible {"espressif,esp32-uart"}
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_IDX_0 "espressif,esp32-uart"
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-uart
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_uart
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_UART
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, compatible, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff40000, compatible, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff40000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff40000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_interrupts {34 /* 0x22 */}
#define DT_N_S_soc_S_uart_3ff40000_P_interrupts_IDX_0 34
#define DT_N_S_soc_S_uart_3ff40000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff40000, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff40000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff40000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_IDX_0_VAL_offset 1
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, clocks, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff40000, clocks, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff40000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff40000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_3ff40000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_uart_3ff40000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/uart@3ff50000
 *
 * Node identifier: DT_N_S_soc_S_uart_3ff50000
 *
 * Binding (compatible = espressif,esp32-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_3ff50000_PATH "/soc/uart@3ff50000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_3ff50000_FULL_NAME "uart@3ff50000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_3ff50000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_3ff50000_CHILD_IDX 11

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_3ff50000_ORD 66
#define DT_N_S_soc_S_uart_3ff50000_ORD_STR_SORTABLE 00066

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_3ff50000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */ \
	34, /* /pin-controller/uart1_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_3ff50000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_3ff50000_EXISTS 1
#define DT_N_INST_1_espressif_esp32_uart DT_N_S_soc_S_uart_3ff50000
#define DT_N_NODELABEL_uart1             DT_N_S_soc_S_uart_3ff50000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_3ff50000_REG_NUM 1
#define DT_N_S_soc_S_uart_3ff50000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_REG_IDX_0_VAL_ADDRESS 1073020928 /* 0x3ff50000 */
#define DT_N_S_soc_S_uart_3ff50000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_3ff50000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_3ff50000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_3ff50000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_IRQ_IDX_0_VAL_irq 35
#define DT_N_S_soc_S_uart_3ff50000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff50000_COMPAT_MATCHES_espressif_esp32_uart 1
#define DT_N_S_soc_S_uart_3ff50000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_uart_3ff50000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_COMPAT_MODEL_IDX_0 "esp32-uart"
#define DT_N_S_soc_S_uart_3ff50000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_3ff50000_PINCTRL_NUM 1
#define DT_N_S_soc_S_uart_3ff50000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_uart_3ff50000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_uart_3ff50000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_uart_3ff50000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_uart1_default

/* Generic property macros: */
#define DT_N_S_soc_S_uart_3ff50000_P_reg {1073020928 /* 0x3ff50000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_3ff50000_P_reg_IDX_0 1073020928
#define DT_N_S_soc_S_uart_3ff50000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_3ff50000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_uart1_default
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_uart1_default
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, pinctrl_0, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff50000, pinctrl_0, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff50000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff50000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, pinctrl_names, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff50000, pinctrl_names, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff50000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff50000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_uart_3ff50000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_hw_rs485_hd_mode 0
#define DT_N_S_soc_S_uart_3ff50000_P_hw_rs485_hd_mode_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_current_speed 115200
#define DT_N_S_soc_S_uart_3ff50000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_3ff50000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_status "disabled"
#define DT_N_S_soc_S_uart_3ff50000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_uart_3ff50000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_3ff50000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_3ff50000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_uart_3ff50000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_3ff50000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_3ff50000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_3ff50000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, status, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff50000, status, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff50000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff50000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_status_LEN 1
#define DT_N_S_soc_S_uart_3ff50000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_compatible {"espressif,esp32-uart"}
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_IDX_0 "espressif,esp32-uart"
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-uart
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_uart
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_UART
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, compatible, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff50000, compatible, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff50000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff50000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_interrupts {35 /* 0x23 */}
#define DT_N_S_soc_S_uart_3ff50000_P_interrupts_IDX_0 35
#define DT_N_S_soc_S_uart_3ff50000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff50000, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff50000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff50000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_IDX_0_VAL_offset 2
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, clocks, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff50000, clocks, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff50000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff50000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_3ff50000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_uart_3ff50000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/uart@3ff6e000
 *
 * Node identifier: DT_N_S_soc_S_uart_3ff6e000
 *
 * Binding (compatible = espressif,esp32-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_3ff6e000_PATH "/soc/uart@3ff6e000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_3ff6e000_FULL_NAME "uart@3ff6e000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_3ff6e000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_3ff6e000_CHILD_IDX 12

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_3ff6e000_ORD 67
#define DT_N_S_soc_S_uart_3ff6e000_ORD_STR_SORTABLE 00067

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_3ff6e000_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */ \
	37, /* /pin-controller/uart2_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_3ff6e000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_3ff6e000_EXISTS 1
#define DT_N_INST_2_espressif_esp32_uart DT_N_S_soc_S_uart_3ff6e000
#define DT_N_NODELABEL_uart2             DT_N_S_soc_S_uart_3ff6e000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_3ff6e000_REG_NUM 1
#define DT_N_S_soc_S_uart_3ff6e000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_REG_IDX_0_VAL_ADDRESS 1073143808 /* 0x3ff6e000 */
#define DT_N_S_soc_S_uart_3ff6e000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_3ff6e000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_3ff6e000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_3ff6e000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_IRQ_IDX_0_VAL_irq 36
#define DT_N_S_soc_S_uart_3ff6e000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff6e000_COMPAT_MATCHES_espressif_esp32_uart 1
#define DT_N_S_soc_S_uart_3ff6e000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_uart_3ff6e000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_COMPAT_MODEL_IDX_0 "esp32-uart"
#define DT_N_S_soc_S_uart_3ff6e000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_3ff6e000_PINCTRL_NUM 1
#define DT_N_S_soc_S_uart_3ff6e000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_uart_3ff6e000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_uart_3ff6e000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_uart_3ff6e000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_uart2_default

/* Generic property macros: */
#define DT_N_S_soc_S_uart_3ff6e000_P_reg {1073143808 /* 0x3ff6e000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_IDX_0 1073143808
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_uart2_default
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_uart2_default
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, pinctrl_0, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff6e000, pinctrl_0, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff6e000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff6e000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, pinctrl_names, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff6e000, pinctrl_names, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff6e000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff6e000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_uart_3ff6e000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_hw_rs485_hd_mode 0
#define DT_N_S_soc_S_uart_3ff6e000_P_hw_rs485_hd_mode_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_current_speed 115200
#define DT_N_S_soc_S_uart_3ff6e000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_3ff6e000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_status "disabled"
#define DT_N_S_soc_S_uart_3ff6e000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_uart_3ff6e000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_3ff6e000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_3ff6e000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_uart_3ff6e000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_3ff6e000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_3ff6e000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_3ff6e000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, status, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff6e000, status, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff6e000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff6e000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_status_LEN 1
#define DT_N_S_soc_S_uart_3ff6e000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible {"espressif,esp32-uart"}
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_IDX_0 "espressif,esp32-uart"
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-uart
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_uart
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_UART
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, compatible, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff6e000, compatible, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff6e000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff6e000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupts {36 /* 0x24 */}
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupts_IDX_0 36
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff6e000, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff6e000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff6e000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_IDX_0_VAL_offset 3
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, clocks, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3ff6e000, clocks, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff6e000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3ff6e000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_3ff6e000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_uart_3ff6e000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/watchdog@3ff5f048
 *
 * Node identifier: DT_N_S_soc_S_watchdog_3ff5f048
 *
 * Binding (compatible = espressif,esp32-watchdog):
 *   $ZEPHYR_BASE/dts/bindings/watchdog/espressif,esp32-watchdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_watchdog_3ff5f048_PATH "/soc/watchdog@3ff5f048"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_watchdog_3ff5f048_FULL_NAME "watchdog@3ff5f048"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_watchdog_3ff5f048_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_watchdog_3ff5f048_CHILD_IDX 22

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_watchdog_3ff5f048_ORD 68
#define DT_N_S_soc_S_watchdog_3ff5f048_ORD_STR_SORTABLE 00068

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_watchdog_3ff5f048_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_watchdog_3ff5f048_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_watchdog_3ff5f048_EXISTS 1
#define DT_N_ALIAS_watchdog0                 DT_N_S_soc_S_watchdog_3ff5f048
#define DT_N_INST_0_espressif_esp32_watchdog DT_N_S_soc_S_watchdog_3ff5f048
#define DT_N_NODELABEL_wdt0                  DT_N_S_soc_S_watchdog_3ff5f048

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_watchdog_3ff5f048_REG_NUM 1
#define DT_N_S_soc_S_watchdog_3ff5f048_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_REG_IDX_0_VAL_ADDRESS 1073082440 /* 0x3ff5f048 */
#define DT_N_S_soc_S_watchdog_3ff5f048_REG_IDX_0_VAL_SIZE 32 /* 0x20 */
#define DT_N_S_soc_S_watchdog_3ff5f048_RANGES_NUM 0
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_watchdog_3ff5f048_IRQ_NUM 1
#define DT_N_S_soc_S_watchdog_3ff5f048_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_IRQ_IDX_0_VAL_irq 16
#define DT_N_S_soc_S_watchdog_3ff5f048_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_watchdog_3ff5f048_COMPAT_MATCHES_espressif_esp32_watchdog 1
#define DT_N_S_soc_S_watchdog_3ff5f048_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_watchdog_3ff5f048_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_COMPAT_MODEL_IDX_0 "esp32-watchdog"
#define DT_N_S_soc_S_watchdog_3ff5f048_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_watchdog_3ff5f048_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg {1073082440 /* 0x3ff5f048 */, 32 /* 0x20 */}
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_IDX_0 1073082440
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_IDX_1 32
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status "okay"
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 0)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 0)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_LEN 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible {"espressif,esp32-watchdog"}
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_IDX_0 "espressif,esp32-watchdog"
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-watchdog
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_watchdog
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_WATCHDOG
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048, compatible, 0)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_3ff5f048, compatible, 0)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_LEN 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupts {16 /* 0x10 */}
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupts_IDX_0 16
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048, interrupt_parent, 0)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_3ff5f048, interrupt_parent, 0)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_IDX_0_VAL_offset 8
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048, clocks, 0)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_3ff5f048, clocks, 0)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_LEN 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_wakeup_source 0
#define DT_N_S_soc_S_watchdog_3ff5f048_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_watchdog_3ff5f048_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/watchdog@3ff60048
 *
 * Node identifier: DT_N_S_soc_S_watchdog_3ff60048
 *
 * Binding (compatible = espressif,esp32-watchdog):
 *   $ZEPHYR_BASE/dts/bindings/watchdog/espressif,esp32-watchdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_watchdog_3ff60048_PATH "/soc/watchdog@3ff60048"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_watchdog_3ff60048_FULL_NAME "watchdog@3ff60048"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_watchdog_3ff60048_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_watchdog_3ff60048_CHILD_IDX 23

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_watchdog_3ff60048_ORD 69
#define DT_N_S_soc_S_watchdog_3ff60048_ORD_STR_SORTABLE 00069

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_watchdog_3ff60048_REQUIRES_ORDS \
	3, /* /soc */ \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_watchdog_3ff60048_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_watchdog_3ff60048_EXISTS 1
#define DT_N_INST_1_espressif_esp32_watchdog DT_N_S_soc_S_watchdog_3ff60048
#define DT_N_NODELABEL_wdt1                  DT_N_S_soc_S_watchdog_3ff60048

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_watchdog_3ff60048_REG_NUM 1
#define DT_N_S_soc_S_watchdog_3ff60048_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_REG_IDX_0_VAL_ADDRESS 1073086536 /* 0x3ff60048 */
#define DT_N_S_soc_S_watchdog_3ff60048_REG_IDX_0_VAL_SIZE 32 /* 0x20 */
#define DT_N_S_soc_S_watchdog_3ff60048_RANGES_NUM 0
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_watchdog_3ff60048_IRQ_NUM 1
#define DT_N_S_soc_S_watchdog_3ff60048_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_IRQ_IDX_0_VAL_irq 20
#define DT_N_S_soc_S_watchdog_3ff60048_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_watchdog_3ff60048_COMPAT_MATCHES_espressif_esp32_watchdog 1
#define DT_N_S_soc_S_watchdog_3ff60048_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_watchdog_3ff60048_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_COMPAT_MODEL_IDX_0 "esp32-watchdog"
#define DT_N_S_soc_S_watchdog_3ff60048_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_watchdog_3ff60048_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg {1073086536 /* 0x3ff60048 */, 32 /* 0x20 */}
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_IDX_0 1073086536
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_IDX_1 32
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_status "disabled"
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff60048, status, 0)
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_3ff60048, status, 0)
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff60048, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_3ff60048, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_LEN 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible {"espressif,esp32-watchdog"}
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_IDX_0 "espressif,esp32-watchdog"
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-watchdog
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_watchdog
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_WATCHDOG
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff60048, compatible, 0)
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_3ff60048, compatible, 0)
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff60048, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_3ff60048, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_LEN 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupts {20 /* 0x14 */}
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupts_IDX_0 20
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff60048, interrupt_parent, 0)
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_3ff60048, interrupt_parent, 0)
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff60048, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_3ff60048, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_IDX_0_VAL_offset 9
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff60048, clocks, 0)
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_3ff60048, clocks, 0)
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff60048, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_3ff60048, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_LEN 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_wakeup_source 0
#define DT_N_S_soc_S_watchdog_3ff60048_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_watchdog_3ff60048_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000
 *
 * Binding (compatible = espressif,esp32-flash-controller):
 *   $ZEPHYR_BASE/dts/bindings/flash_controller/espressif,esp32-flash-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_PATH "/soc/flash-controller@3ff42000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_FULL_NAME "flash-controller@3ff42000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_3ff42000_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_ORD 70
#define DT_N_S_soc_S_flash_controller_3ff42000_ORD_STR_SORTABLE 00070

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_REQUIRES_ORDS \
	3, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_SUPPORTS_ORDS \
	71, /* /soc/flash-controller@3ff42000/flash@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_flash_controller DT_N_S_soc_S_flash_controller_3ff42000
#define DT_N_NODELABEL_flash                         DT_N_S_soc_S_flash_controller_3ff42000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_REG_IDX_0_VAL_ADDRESS 1072963584 /* 0x3ff42000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_COMPAT_MATCHES_espressif_esp32_flash_controller 1
#define DT_N_S_soc_S_flash_controller_3ff42000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_flash_controller_3ff42000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_COMPAT_MODEL_IDX_0 "esp32-flash-controller"
#define DT_N_S_soc_S_flash_controller_3ff42000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg {1072963584 /* 0x3ff42000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_IDX_0 1072963584
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible {"espressif,esp32-flash-controller"}
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_IDX_0 "espressif,esp32-flash-controller"
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-flash-controller
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_flash_controller
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_FLASH_CONTROLLER
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_3ff42000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_3ff42000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flash_controller_3ff42000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0
 *
 * Binding (compatible = soc-nv-flash):
 *   $ZEPHYR_BASE/dts/bindings/mtd/soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_PATH "/soc/flash-controller@3ff42000/flash@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FULL_NAME "flash@0"

/* Node parent (/soc/flash-controller@3ff42000) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_PARENT DT_N_S_soc_S_flash_controller_3ff42000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_ORD 71
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_ORD_STR_SORTABLE 00071

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REQUIRES_ORDS \
	70, /* /soc/flash-controller@3ff42000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_SUPPORTS_ORDS \
	72, /* /soc/flash-controller@3ff42000/flash@0/partitions */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_EXISTS 1
#define DT_N_INST_0_soc_nv_flash DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0
#define DT_N_NODELABEL_flash0    DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REG_IDX_0_VAL_SIZE 4194304 /* 0x400000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_erase_block_size 4096
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_erase_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_write_block_size 4
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_write_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status "okay"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_LEN 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible {"soc-nv-flash"}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_IDX_0_STRING_UNQUOTED soc-nv-flash
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_IDX_0_STRING_TOKEN soc_nv_flash
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_IDX_0_STRING_UPPER_TOKEN SOC_NV_FLASH
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg {0 /* 0x0 */, 4194304 /* 0x400000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_IDX_1 4194304
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0/partitions
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions
 *
 * Binding (compatible = fixed-partitions):
 *   $ZEPHYR_BASE/dts/bindings/mtd/fixed-partitions.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_PATH "/soc/flash-controller@3ff42000/flash@0/partitions"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FULL_NAME "partitions"

/* Node parent (/soc/flash-controller@3ff42000/flash@0) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_PARENT DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_ORD 72
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_ORD_STR_SORTABLE 00072

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_REQUIRES_ORDS \
	71, /* /soc/flash-controller@3ff42000/flash@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_SUPPORTS_ORDS \
	73, /* /soc/flash-controller@3ff42000/flash@0/partitions/partition@1000 */ \
	74, /* /soc/flash-controller@3ff42000/flash@0/partitions/partition@10000 */ \
	75, /* /soc/flash-controller@3ff42000/flash@0/partitions/partition@110000 */ \
	76, /* /soc/flash-controller@3ff42000/flash@0/partitions/partition@210000 */ \
	77, /* /soc/flash-controller@3ff42000/flash@0/partitions/partition@250000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_EXISTS 1
#define DT_N_INST_0_fixed_partitions DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_REG_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_COMPAT_MATCHES_fixed_partitions 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0/partitions/partition@1000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_PATH "/soc/flash-controller@3ff42000/flash@0/partitions/partition@1000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FULL_NAME "partition@1000"

/* Node parent (/soc/flash-controller@3ff42000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_PARENT DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_ORD 73
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_ORD_STR_SORTABLE 00073

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_REQUIRES_ORDS \
	72, /* /soc/flash-controller@3ff42000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_EXISTS 1
#define DT_N_NODELABEL_boot_partition DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_REG_IDX_0_VAL_ADDRESS 4096 /* 0x1000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_REG_IDX_0_VAL_SIZE 61440 /* 0xf000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_PARTITION_ID 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label "mcuboot"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_STRING_UNQUOTED mcuboot
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_STRING_TOKEN mcuboot
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_STRING_UPPER_TOKEN MCUBOOT
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_IDX_0 "mcuboot"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_read_only 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_reg {4096 /* 0x1000 */, 61440 /* 0xf000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_reg_IDX_0 4096
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_reg_IDX_1 61440
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0/partitions/partition@10000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_PATH "/soc/flash-controller@3ff42000/flash@0/partitions/partition@10000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FULL_NAME "partition@10000"

/* Node parent (/soc/flash-controller@3ff42000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_PARENT DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_ORD 74
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_ORD_STR_SORTABLE 00074

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_REQUIRES_ORDS \
	72, /* /soc/flash-controller@3ff42000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_EXISTS 1
#define DT_N_NODELABEL_slot0_partition DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_REG_IDX_0_VAL_ADDRESS 65536 /* 0x10000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_REG_IDX_0_VAL_SIZE 1048576 /* 0x100000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_PARTITION_ID 1

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label "image-0"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_STRING_UNQUOTED image-0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_STRING_TOKEN image_0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_STRING_UPPER_TOKEN IMAGE_0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_IDX_0 "image-0"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_reg {65536 /* 0x10000 */, 1048576 /* 0x100000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_0 65536
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_1 1048576
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0/partitions/partition@110000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_PATH "/soc/flash-controller@3ff42000/flash@0/partitions/partition@110000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FULL_NAME "partition@110000"

/* Node parent (/soc/flash-controller@3ff42000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_PARENT DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_ORD 75
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_ORD_STR_SORTABLE 00075

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_REQUIRES_ORDS \
	72, /* /soc/flash-controller@3ff42000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_EXISTS 1
#define DT_N_NODELABEL_slot1_partition DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_REG_IDX_0_VAL_ADDRESS 1114112 /* 0x110000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_REG_IDX_0_VAL_SIZE 1048576 /* 0x100000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_PARTITION_ID 2

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label "image-1"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_STRING_UNQUOTED image-1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_STRING_TOKEN image_1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_STRING_UPPER_TOKEN IMAGE_1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_IDX_0 "image-1"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_reg {1114112 /* 0x110000 */, 1048576 /* 0x100000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_reg_IDX_0 1114112
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_reg_IDX_1 1048576
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0/partitions/partition@210000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_PATH "/soc/flash-controller@3ff42000/flash@0/partitions/partition@210000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FULL_NAME "partition@210000"

/* Node parent (/soc/flash-controller@3ff42000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_PARENT DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_ORD 76
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_ORD_STR_SORTABLE 00076

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_REQUIRES_ORDS \
	72, /* /soc/flash-controller@3ff42000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_EXISTS 1
#define DT_N_NODELABEL_scratch_partition DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_REG_IDX_0_VAL_ADDRESS 2162688 /* 0x210000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_REG_IDX_0_VAL_SIZE 262144 /* 0x40000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_PARTITION_ID 3

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label "image-scratch"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_STRING_UNQUOTED image-scratch
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_STRING_TOKEN image_scratch
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_STRING_UPPER_TOKEN IMAGE_SCRATCH
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_IDX_0 "image-scratch"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_reg {2162688 /* 0x210000 */, 262144 /* 0x40000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_reg_IDX_0 2162688
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_reg_IDX_1 262144
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0/partitions/partition@250000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_PATH "/soc/flash-controller@3ff42000/flash@0/partitions/partition@250000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FULL_NAME "partition@250000"

/* Node parent (/soc/flash-controller@3ff42000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_PARENT DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_ORD 77
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_ORD_STR_SORTABLE 00077

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_REQUIRES_ORDS \
	72, /* /soc/flash-controller@3ff42000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_EXISTS 1
#define DT_N_NODELABEL_storage_partition DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_REG_IDX_0_VAL_ADDRESS 2424832 /* 0x250000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_REG_IDX_0_VAL_SIZE 24576 /* 0x6000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_PARTITION_ID 4

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label "storage"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_STRING_UNQUOTED storage
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_STRING_TOKEN storage
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_STRING_UPPER_TOKEN STORAGE
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_IDX_0 "storage"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_reg {2424832 /* 0x250000 */, 24576 /* 0x6000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_reg_IDX_0 2424832
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_reg_IDX_1 24576
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/gpio/gpio@3ff44800
 *
 * Node identifier: DT_N_S_soc_S_gpio_S_gpio_3ff44800
 *
 * Binding (compatible = espressif,esp32-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/espressif,esp32-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_PATH "/soc/gpio/gpio@3ff44800"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_FULL_NAME "gpio@3ff44800"

/* Node parent (/soc/gpio) identifier: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_PARENT DT_N_S_soc_S_gpio

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_ORD 78
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_ORD_STR_SORTABLE 00078

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_REQUIRES_ORDS \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	9, /* /soc/gpio */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_EXISTS 1
#define DT_N_INST_1_espressif_esp32_gpio DT_N_S_soc_S_gpio_S_gpio_3ff44800
#define DT_N_NODELABEL_gpio1             DT_N_S_soc_S_gpio_S_gpio_3ff44800

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_REG_NUM 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_REG_IDX_0_VAL_ADDRESS 1072973824 /* 0x3ff44800 */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_REG_IDX_0_VAL_SIZE 2048 /* 0x800 */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_IRQ_IDX_0_VAL_irq 22
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_COMPAT_MATCHES_espressif_esp32_gpio 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_COMPAT_MODEL_IDX_0 "esp32-gpio"
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_reg {1072973824 /* 0x3ff44800 */, 2048 /* 0x800 */}
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_reg_IDX_0 1072973824
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_reg_IDX_1 2048
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_ngpios 8
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_gpio_reserved_ranges {6 /* 0x6 */, 2 /* 0x2 */}
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_gpio_reserved_ranges_IDX_0 6
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_gpio_reserved_ranges_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_gpio_reserved_ranges_IDX_1 2
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_gpio_reserved_ranges_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_gpio_reserved_ranges_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, gpio_reserved_ranges, 0) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, gpio_reserved_ranges, 1)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_gpio_reserved_ranges_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, gpio_reserved_ranges, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, gpio_reserved_ranges, 1)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_gpio_reserved_ranges_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, gpio_reserved_ranges, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, gpio_reserved_ranges, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_gpio_reserved_ranges_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, gpio_reserved_ranges, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, gpio_reserved_ranges, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_gpio_reserved_ranges_LEN 2
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_gpio_reserved_ranges_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status "okay"
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, status, 0)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, status, 0)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_LEN 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_compatible {"espressif,esp32-gpio"}
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_compatible_IDX_0 "espressif,esp32-gpio"
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-gpio
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_gpio
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_GPIO
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, compatible, 0)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, compatible, 0)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_interrupts {22 /* 0x16 */}
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_interrupts_IDX_0 22
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, interrupt_parent, 0)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, interrupt_parent, 0)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_S_gpio_3ff44800_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/rtc@3ff48000/rtc_timer
 *
 * Node identifier: DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer
 *
 * Binding (compatible = espressif,esp32-rtc-timer):
 *   $ZEPHYR_BASE/dts/bindings/counter/espressif,esp32-rtc-timer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_PATH "/soc/rtc@3ff48000/rtc_timer"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_FULL_NAME "rtc_timer"

/* Node parent (/soc/rtc@3ff48000) identifier: */
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_PARENT DT_N_S_soc_S_rtc_3ff48000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_ORD 79
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_ORD_STR_SORTABLE 00079

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_REQUIRES_ORDS \
	4, /* /soc/interrupt-controller@3ff00104 */ \
	5, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_EXISTS 1
#define DT_N_INST_0_espressif_esp32_rtc_timer DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer
#define DT_N_NODELABEL_rtc_timer              DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_REG_NUM 0
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_RANGES_NUM 0
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_IRQ_NUM 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_IRQ_IDX_0_VAL_irq 46
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_COMPAT_MATCHES_espressif_esp32_rtc_timer 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_COMPAT_MODEL_IDX_0 "esp32-rtc-timer"
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_slow_clk_freq 150000
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_slow_clk_freq_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status "okay"
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, status, 0)
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, status, 0)
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_LEN 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_status_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_compatible {"espressif,esp32-rtc-timer"}
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_compatible_IDX_0 "espressif,esp32-rtc-timer"
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-rtc-timer
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_rtc_timer
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_RTC_TIMER
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, compatible, 0)
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, compatible, 0)
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_compatible_LEN 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_compatible_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_interrupts {46 /* 0x2e */}
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_interrupts_IDX_0 46
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, interrupt_parent, 0)
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, interrupt_parent, 0)
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_wakeup_source 0
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_canbus                  DT_N_S_soc_S_can_3ff6b000
#define DT_CHOSEN_zephyr_canbus_EXISTS           1
#define DT_CHOSEN_zephyr_entropy                 DT_N_S_soc_S_trng_3ff75144
#define DT_CHOSEN_zephyr_entropy_EXISTS          1
#define DT_CHOSEN_zephyr_flash_controller        DT_N_S_soc_S_flash_controller_3ff42000
#define DT_CHOSEN_zephyr_flash_controller_EXISTS 1
#define DT_CHOSEN_zephyr_sram                    DT_N_S_soc_S_memory_3ffb0000
#define DT_CHOSEN_zephyr_sram_EXISTS             1
#define DT_CHOSEN_zephyr_console                 DT_N_S_soc_S_uart_3ff40000
#define DT_CHOSEN_zephyr_console_EXISTS          1
#define DT_CHOSEN_zephyr_shell_uart              DT_N_S_soc_S_uart_3ff40000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS       1
#define DT_CHOSEN_zephyr_flash                   DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0
#define DT_CHOSEN_zephyr_flash_EXISTS            1
#define DT_CHOSEN_zephyr_code_partition          DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000
#define DT_CHOSEN_zephyr_code_partition_EXISTS   1

/* Macros for iterating over all nodes and enabled nodes */
#define DT_FOREACH_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_soc_S_memory_3ffb0000) fn(DT_N_S_soc_S_memory_3ffe5230) fn(DT_N_S_soc_S_memory_3ffe5630) fn(DT_N_S_soc_S_interrupt_controller_3ff00104) fn(DT_N_S_soc_S_rtc_3ff48000) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer) fn(DT_N_S_soc_S_flash_controller_3ff42000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000) fn(DT_N_S_soc_S_psram_3f800000) fn(DT_N_S_soc_S_ipm_3ffed238) fn(DT_N_S_soc_S_ipi_3f4c0058) fn(DT_N_S_soc_S_ipi_3f4c005c) fn(DT_N_S_soc_S_uart_3ff40000) fn(DT_N_S_soc_S_uart_3ff50000) fn(DT_N_S_soc_S_uart_3ff6e000) fn(DT_N_S_soc_S_pcnt_3ff57000) fn(DT_N_S_soc_S_ledc_3ff59000) fn(DT_N_S_soc_S_mcpwm_3ff5e000) fn(DT_N_S_soc_S_mcpwm_3ff6c000) fn(DT_N_S_soc_S_gpio) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800) fn(DT_N_S_soc_S_touch_3ff48858) fn(DT_N_S_soc_S_i2c_3ff53000) fn(DT_N_S_soc_S_i2c_3ff67000) fn(DT_N_S_soc_S_trng_3ff75144) fn(DT_N_S_soc_S_watchdog_3ff5f048) fn(DT_N_S_soc_S_watchdog_3ff60048) fn(DT_N_S_soc_S_spi_3ff64000) fn(DT_N_S_soc_S_spi_3ff65000) fn(DT_N_S_soc_S_can_3ff6b000) fn(DT_N_S_soc_S_counter_3ff5f000) fn(DT_N_S_soc_S_counter_3ff5f024) fn(DT_N_S_soc_S_counter_3ff60000) fn(DT_N_S_soc_S_counter_3ff60024) fn(DT_N_S_soc_S_dac_3ff48800) fn(DT_N_S_soc_S_adc_3ff48800) fn(DT_N_S_soc_S_adc_3ff48890) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1) fn(DT_N_S_cpus_S_power_states) fn(DT_N_S_cpus_S_power_states_S_light_sleep) fn(DT_N_S_cpus_S_power_states_S_deep_sleep) fn(DT_N_S_wifi) fn(DT_N_S_eth) fn(DT_N_S_mdio) fn(DT_N_S_pin_controller) fn(DT_N_S_pin_controller_S_uart0_default) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) fn(DT_N_S_pin_controller_S_uart0_default_S_group2) fn(DT_N_S_pin_controller_S_uart1_default) fn(DT_N_S_pin_controller_S_uart1_default_S_group1) fn(DT_N_S_pin_controller_S_uart1_default_S_group2) fn(DT_N_S_pin_controller_S_uart2_default) fn(DT_N_S_pin_controller_S_uart2_default_S_group1) fn(DT_N_S_pin_controller_S_uart2_default_S_group2) fn(DT_N_S_pin_controller_S_spim2_default) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) fn(DT_N_S_pin_controller_S_spim2_default_S_group2) fn(DT_N_S_pin_controller_S_spim3_default) fn(DT_N_S_pin_controller_S_spim3_default_S_group1) fn(DT_N_S_pin_controller_S_spim3_default_S_group2) fn(DT_N_S_pin_controller_S_i2c0_default) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1) fn(DT_N_S_buttons) fn(DT_N_S_buttons_S_button_0) fn(DT_N_S_buttons_S_sw_0) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_0)
#define DT_FOREACH_OKAY_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_soc_S_memory_3ffb0000) fn(DT_N_S_soc_S_memory_3ffe5230) fn(DT_N_S_soc_S_memory_3ffe5630) fn(DT_N_S_soc_S_interrupt_controller_3ff00104) fn(DT_N_S_soc_S_rtc_3ff48000) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer) fn(DT_N_S_soc_S_flash_controller_3ff42000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000) fn(DT_N_S_soc_S_ipi_3f4c0058) fn(DT_N_S_soc_S_ipi_3f4c005c) fn(DT_N_S_soc_S_uart_3ff40000) fn(DT_N_S_soc_S_gpio) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800) fn(DT_N_S_soc_S_i2c_3ff53000) fn(DT_N_S_soc_S_trng_3ff75144) fn(DT_N_S_soc_S_watchdog_3ff5f048) fn(DT_N_S_soc_S_spi_3ff64000) fn(DT_N_S_soc_S_spi_3ff65000) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1) fn(DT_N_S_cpus_S_power_states) fn(DT_N_S_cpus_S_power_states_S_light_sleep) fn(DT_N_S_cpus_S_power_states_S_deep_sleep) fn(DT_N_S_pin_controller) fn(DT_N_S_pin_controller_S_uart0_default) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) fn(DT_N_S_pin_controller_S_uart0_default_S_group2) fn(DT_N_S_pin_controller_S_uart1_default) fn(DT_N_S_pin_controller_S_uart1_default_S_group1) fn(DT_N_S_pin_controller_S_uart1_default_S_group2) fn(DT_N_S_pin_controller_S_uart2_default) fn(DT_N_S_pin_controller_S_uart2_default_S_group1) fn(DT_N_S_pin_controller_S_uart2_default_S_group2) fn(DT_N_S_pin_controller_S_spim2_default) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) fn(DT_N_S_pin_controller_S_spim2_default_S_group2) fn(DT_N_S_pin_controller_S_spim3_default) fn(DT_N_S_pin_controller_S_spim3_default_S_group1) fn(DT_N_S_pin_controller_S_spim3_default_S_group2) fn(DT_N_S_pin_controller_S_i2c0_default) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1) fn(DT_N_S_buttons) fn(DT_N_S_buttons_S_button_0) fn(DT_N_S_buttons_S_sw_0) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_0)
#define DT_FOREACH_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3ffb0000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3ffe5230, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3ffe5630, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_3ff48000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, __VA_ARGS__) fn(DT_N_S_soc_S_psram_3f800000, __VA_ARGS__) fn(DT_N_S_soc_S_ipm_3ffed238, __VA_ARGS__) fn(DT_N_S_soc_S_ipi_3f4c0058, __VA_ARGS__) fn(DT_N_S_soc_S_ipi_3f4c005c, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3ff40000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3ff50000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3ff6e000, __VA_ARGS__) fn(DT_N_S_soc_S_pcnt_3ff57000, __VA_ARGS__) fn(DT_N_S_soc_S_ledc_3ff59000, __VA_ARGS__) fn(DT_N_S_soc_S_mcpwm_3ff5e000, __VA_ARGS__) fn(DT_N_S_soc_S_mcpwm_3ff6c000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, __VA_ARGS__) fn(DT_N_S_soc_S_touch_3ff48858, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_3ff53000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_3ff67000, __VA_ARGS__) fn(DT_N_S_soc_S_trng_3ff75144, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_3ff5f048, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_3ff60048, __VA_ARGS__) fn(DT_N_S_soc_S_spi_3ff64000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_3ff65000, __VA_ARGS__) fn(DT_N_S_soc_S_can_3ff6b000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff5f000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff5f024, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff60000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff60024, __VA_ARGS__) fn(DT_N_S_soc_S_dac_3ff48800, __VA_ARGS__) fn(DT_N_S_soc_S_adc_3ff48800, __VA_ARGS__) fn(DT_N_S_soc_S_adc_3ff48890, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_light_sleep, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, __VA_ARGS__) fn(DT_N_S_wifi, __VA_ARGS__) fn(DT_N_S_eth, __VA_ARGS__) fn(DT_N_S_mdio, __VA_ARGS__) fn(DT_N_S_pin_controller, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart1_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart1_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart1_default_S_group2, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart2_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart2_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart2_default_S_group2, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim3_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim3_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim3_default_S_group2, __VA_ARGS__) fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__) fn(DT_N_S_buttons, __VA_ARGS__) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__) fn(DT_N_S_buttons_S_sw_0, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3ffb0000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3ffe5230, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3ffe5630, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_3ff48000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, __VA_ARGS__) fn(DT_N_S_soc_S_ipi_3f4c0058, __VA_ARGS__) fn(DT_N_S_soc_S_ipi_3f4c005c, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3ff40000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_3ff53000, __VA_ARGS__) fn(DT_N_S_soc_S_trng_3ff75144, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_3ff5f048, __VA_ARGS__) fn(DT_N_S_soc_S_spi_3ff64000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_3ff65000, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_light_sleep, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, __VA_ARGS__) fn(DT_N_S_pin_controller, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart1_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart1_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart1_default_S_group2, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart2_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart2_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart2_default_S_group2, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim3_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim3_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim3_default_S_group2, __VA_ARGS__) fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__) fn(DT_N_S_buttons, __VA_ARGS__) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__) fn(DT_N_S_buttons_S_sw_0, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_COMPAT_fixed_partitions_LABEL_mcuboot DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000
#define DT_COMPAT_fixed_partitions_LABEL_mcuboot_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_0 DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000
#define DT_COMPAT_fixed_partitions_LABEL_image_0_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_1 DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000
#define DT_COMPAT_fixed_partitions_LABEL_image_1_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_scratch DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000
#define DT_COMPAT_fixed_partitions_LABEL_image_scratch_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_storage DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000
#define DT_COMPAT_fixed_partitions_LABEL_storage_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_espressif_esp32 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_intc 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_rtc 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_rtc_timer 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_flash_controller 1
#define DT_COMPAT_HAS_OKAY_soc_nv_flash 1
#define DT_COMPAT_HAS_OKAY_fixed_partitions 1
#define DT_COMPAT_HAS_OKAY_espressif_crosscore_interrupt 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_uart 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_gpio 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_i2c 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_trng 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_watchdog 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_spi 1
#define DT_COMPAT_HAS_OKAY_cdns_tensilica_xtensa_lx6 1
#define DT_COMPAT_HAS_OKAY_zephyr_power_state 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_pinctrl 1
#define DT_COMPAT_HAS_OKAY_gpio_keys 1
#define DT_COMPAT_HAS_OKAY_gpio_leds 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_espressif_esp32_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 2
#define DT_N_INST_mmio_sram_NUM_OKAY 3
#define DT_N_INST_espressif_esp32_intc_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_rtc_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_rtc_timer_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_flash_controller_NUM_OKAY 1
#define DT_N_INST_soc_nv_flash_NUM_OKAY 1
#define DT_N_INST_fixed_partitions_NUM_OKAY 1
#define DT_N_INST_espressif_crosscore_interrupt_NUM_OKAY 2
#define DT_N_INST_espressif_esp32_uart_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_gpio_NUM_OKAY 2
#define DT_N_INST_espressif_esp32_i2c_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_trng_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_watchdog_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_spi_NUM_OKAY 2
#define DT_N_INST_cdns_tensilica_xtensa_lx6_NUM_OKAY 2
#define DT_N_INST_zephyr_power_state_NUM_OKAY 2
#define DT_N_INST_espressif_esp32_pinctrl_NUM_OKAY 1
#define DT_N_INST_gpio_keys_NUM_OKAY 1
#define DT_N_INST_gpio_leds_NUM_OKAY 1
#define DT_FOREACH_OKAY_espressif_esp32(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc) fn(DT_N_S_soc_S_gpio)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_soc_S_gpio, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_mmio_sram(fn) fn(DT_N_S_soc_S_memory_3ffb0000) fn(DT_N_S_soc_S_memory_3ffe5230) fn(DT_N_S_soc_S_memory_3ffe5630)
#define DT_FOREACH_OKAY_VARGS_mmio_sram(fn, ...) fn(DT_N_S_soc_S_memory_3ffb0000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3ffe5230, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3ffe5630, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0) fn(1) fn(2)
#define DT_FOREACH_OKAY_INST_VARGS_mmio_sram(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_intc(fn) fn(DT_N_S_soc_S_interrupt_controller_3ff00104)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_intc(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_intc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_intc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_rtc(fn) fn(DT_N_S_soc_S_rtc_3ff48000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_rtc(fn, ...) fn(DT_N_S_soc_S_rtc_3ff48000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_rtc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_rtc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_rtc_timer(fn) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_rtc_timer(fn, ...) fn(DT_N_S_soc_S_rtc_3ff48000_S_rtc_timer, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_rtc_timer(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_rtc_timer(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_flash_controller(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_flash_controller(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_flash_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_flash_controller(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_soc_nv_flash(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0)
#define DT_FOREACH_OKAY_VARGS_soc_nv_flash(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_soc_nv_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_soc_nv_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_partitions(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions)
#define DT_FOREACH_OKAY_VARGS_fixed_partitions(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_partitions(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_partitions(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_crosscore_interrupt(fn) fn(DT_N_S_soc_S_ipi_3f4c0058) fn(DT_N_S_soc_S_ipi_3f4c005c)
#define DT_FOREACH_OKAY_VARGS_espressif_crosscore_interrupt(fn, ...) fn(DT_N_S_soc_S_ipi_3f4c0058, __VA_ARGS__) fn(DT_N_S_soc_S_ipi_3f4c005c, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_crosscore_interrupt(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_crosscore_interrupt(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_uart(fn) fn(DT_N_S_soc_S_uart_3ff40000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_uart(fn, ...) fn(DT_N_S_soc_S_uart_3ff40000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_uart(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_uart(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_gpio(fn) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_S_gpio_3ff44800, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_gpio(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_gpio(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_i2c(fn) fn(DT_N_S_soc_S_i2c_3ff53000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_i2c(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_i2c(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_i2c(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_trng(fn) fn(DT_N_S_soc_S_trng_3ff75144)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_trng(fn, ...) fn(DT_N_S_soc_S_trng_3ff75144, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_trng(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_trng(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_watchdog(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_watchdog(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_watchdog(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_watchdog(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_spi(fn) fn(DT_N_S_soc_S_spi_3ff64000) fn(DT_N_S_soc_S_spi_3ff65000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_spi(fn, ...) fn(DT_N_S_soc_S_spi_3ff64000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_3ff65000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_spi(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_spi(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_cdns_tensilica_xtensa_lx6(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1)
#define DT_FOREACH_OKAY_VARGS_cdns_tensilica_xtensa_lx6(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_cdns_tensilica_xtensa_lx6(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_cdns_tensilica_xtensa_lx6(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_power_state(fn) fn(DT_N_S_cpus_S_power_states_S_light_sleep) fn(DT_N_S_cpus_S_power_states_S_deep_sleep)
#define DT_FOREACH_OKAY_VARGS_zephyr_power_state(fn, ...) fn(DT_N_S_cpus_S_power_states_S_light_sleep, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_power_state(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_power_state(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_pinctrl(fn) fn(DT_N_S_pin_controller)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_pinctrl(fn, ...) fn(DT_N_S_pin_controller, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_pinctrl(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_pinctrl(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_keys(fn) fn(DT_N_S_buttons)
#define DT_FOREACH_OKAY_VARGS_gpio_keys(fn, ...) fn(DT_N_S_buttons, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_keys(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_keys(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_leds(fn) fn(DT_N_S_leds)
#define DT_FOREACH_OKAY_VARGS_gpio_leds(fn, ...) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_leds(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_leds(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
